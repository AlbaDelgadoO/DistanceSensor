
DistanceSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004764  08004764  00005764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e4  080047e4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080047e4  080047e4  000057e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047ec  080047ec  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047ec  080047ec  000057ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047f0  080047f0  000057f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080047f4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000240  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000029c  2000029c  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2d3  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000197e  00000000  00000000  0001335f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  00014ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000931  00000000  00000000  00015890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a951  00000000  00000000  000161c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5ed  00000000  00000000  00030b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2b1a  00000000  00000000  0003f0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e1c19  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003784  00000000  00000000  000e1c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000e53e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800474c 	.word	0x0800474c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800474c 	.word	0x0800474c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <Ultrasonic_Trigger>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Función para enviar el pulso TRIG
void Ultrasonic_Trigger(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

    // Configurar PA7 como salida para TRIG
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a70:	2380      	movs	r3, #128	@ 0x80
 8000a72:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4619      	mov	r1, r3
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a88:	f000 fd2e 	bl	80014e8 <HAL_GPIO_Init>

    // Generar un pulso de 10 µs en TRIG
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2180      	movs	r1, #128	@ 0x80
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a94:	f000 feb2 	bl	80017fc <HAL_GPIO_WritePin>
    HAL_Delay(0); // Breve retardo para asegurar el pulso de 10 µs
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f000 fbef 	bl	800127c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa6:	f000 fea9 	bl	80017fc <HAL_GPIO_WritePin>
}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	0000      	movs	r0, r0
 8000ab4:	0000      	movs	r0, r0
	...

08000ab8 <Ultrasonic_ReadEcho>:
uint32_t Ultrasonic_ReadEcho(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
    uint32_t start_time, stop_time;

    // Configurar PA7 como entrada para ECHO
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae0:	f000 fd02 	bl	80014e8 <HAL_GPIO_Init>

    // Esperar a que ECHO se eleve a HIGH
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET);
 8000ae4:	bf00      	nop
 8000ae6:	2180      	movs	r1, #128	@ 0x80
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aec:	f000 fe6e 	bl	80017cc <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f7      	beq.n	8000ae6 <Ultrasonic_ReadEcho+0x2e>

    // Capturar el tiempo de inicio con el temporizador
    start_time = __HAL_TIM_GET_COUNTER(&htim2);
 8000af6:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <Ultrasonic_ReadEcho+0xd0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000afc:	623b      	str	r3, [r7, #32]

    // Esperar a que ECHO baje a LOW
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET);
 8000afe:	bf00      	nop
 8000b00:	2180      	movs	r1, #128	@ 0x80
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b06:	f000 fe61 	bl	80017cc <HAL_GPIO_ReadPin>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d0f7      	beq.n	8000b00 <Ultrasonic_ReadEcho+0x48>

    // Capturar el tiempo de finalización con el temporizador
    stop_time = __HAL_TIM_GET_COUNTER(&htim2);
 8000b10:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <Ultrasonic_ReadEcho+0xd0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b16:	61fb      	str	r3, [r7, #28]

    // Calcular el tiempo transcurrido
	uint32_t time_in_microseconds = stop_time - start_time;
 8000b18:	69fa      	ldr	r2, [r7, #28]
 8000b1a:	6a3b      	ldr	r3, [r7, #32]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24

	// Si el valor es demasiado grande, posiblemente hay un overflow
	if (time_in_microseconds > 0xFFFFFF)
 8000b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b26:	d301      	bcc.n	8000b2c <Ultrasonic_ReadEcho+0x74>
	{
		time_in_microseconds = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	// Convertir el tiempo en distancia (cm), usando la fórmula
	// Velocidad del sonido en cm/µs: 0.0343 cm/µs
	uint32_t distance_in_cm = ((time_in_microseconds * 0.0343) / 2)*10;
 8000b2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b2e:	f7ff fce9 	bl	8000504 <__aeabi_ui2d>
 8000b32:	a313      	add	r3, pc, #76	@ (adr r3, 8000b80 <Ultrasonic_ReadEcho+0xc8>)
 8000b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b38:	f7ff fd5e 	bl	80005f8 <__aeabi_dmul>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	460b      	mov	r3, r1
 8000b40:	4610      	mov	r0, r2
 8000b42:	4619      	mov	r1, r3
 8000b44:	f04f 0200 	mov.w	r2, #0
 8000b48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b4c:	f7ff fe7e 	bl	800084c <__aeabi_ddiv>
 8000b50:	4602      	mov	r2, r0
 8000b52:	460b      	mov	r3, r1
 8000b54:	4610      	mov	r0, r2
 8000b56:	4619      	mov	r1, r3
 8000b58:	f04f 0200 	mov.w	r2, #0
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <Ultrasonic_ReadEcho+0xd4>)
 8000b5e:	f7ff fd4b 	bl	80005f8 <__aeabi_dmul>
 8000b62:	4602      	mov	r2, r0
 8000b64:	460b      	mov	r3, r1
 8000b66:	4610      	mov	r0, r2
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f7ff ff57 	bl	8000a1c <__aeabi_d2uiz>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	61bb      	str	r3, [r7, #24]

	return distance_in_cm;
 8000b72:	69bb      	ldr	r3, [r7, #24]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3728      	adds	r7, #40	@ 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	f3af 8000 	nop.w
 8000b80:	04816f00 	.word	0x04816f00
 8000b84:	3fa18fc5 	.word	0x3fa18fc5
 8000b88:	20000078 	.word	0x20000078
 8000b8c:	40240000 	.word	0x40240000

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b090      	sub	sp, #64	@ 0x40
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b96:	f000 fb0b 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9a:	f000 f8d3 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9e:	f000 f98b 	bl	8000eb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ba2:	f000 f959 	bl	8000e58 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ba6:	f000 f909 	bl	8000dbc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000baa:	4863      	ldr	r0, [pc, #396]	@ (8000d38 <main+0x1a8>)
 8000bac:	f002 f8f4 	bl	8002d98 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // 1. Enviar el pulso TRIG
	  Ultrasonic_Trigger();
 8000bb0:	f7ff ff54 	bl	8000a5c <Ultrasonic_Trigger>
	  // 2. Leer el tiempo de respuesta del pulso ECHO
	  distance_cm = Ultrasonic_ReadEcho();
 8000bb4:	f7ff ff80 	bl	8000ab8 <Ultrasonic_ReadEcho>
 8000bb8:	6378      	str	r0, [r7, #52]	@ 0x34
	  // 3. Imprimir la distancia a través del UART
	  char buffer[50];
	  snprintf(buffer, sizeof(buffer), "Distancia: %ld cm\r\n", distance_cm);
 8000bba:	4638      	mov	r0, r7
 8000bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bbe:	4a5f      	ldr	r2, [pc, #380]	@ (8000d3c <main+0x1ac>)
 8000bc0:	2132      	movs	r1, #50	@ 0x32
 8000bc2:	f003 f90f 	bl	8003de4 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fb01 	bl	80001d0 <strlen>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd8:	4859      	ldr	r0, [pc, #356]	@ (8000d40 <main+0x1b0>)
 8000bda:	f002 fd27 	bl	800362c <HAL_UART_Transmit>
	  HAL_Delay(500); // Esperar 500ms antes de la siguiente medición
 8000bde:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000be2:	f000 fb4b 	bl	800127c <HAL_Delay>

	  // 4. Control del motor vibrador según la distancia
	  uint32_t vibration_on_time = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  uint32_t vibration_off_time = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	63bb      	str	r3, [r7, #56]	@ 0x38

	  if (distance_cm <= 200 && distance_cm > 180) {
 8000bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bf0:	2bc8      	cmp	r3, #200	@ 0xc8
 8000bf2:	d807      	bhi.n	8000c04 <main+0x74>
 8000bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bf6:	2bb4      	cmp	r3, #180	@ 0xb4
 8000bf8:	d904      	bls.n	8000c04 <main+0x74>
	      vibration_on_time = 30; // Vibración breve
 8000bfa:	231e      	movs	r3, #30
 8000bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	      vibration_off_time = 150; // Pausa más larga
 8000bfe:	2396      	movs	r3, #150	@ 0x96
 8000c00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c02:	e07d      	b.n	8000d00 <main+0x170>
	  } else if (distance_cm <= 180 && distance_cm > 165) {
 8000c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c06:	2bb4      	cmp	r3, #180	@ 0xb4
 8000c08:	d807      	bhi.n	8000c1a <main+0x8a>
 8000c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c0c:	2ba5      	cmp	r3, #165	@ 0xa5
 8000c0e:	d904      	bls.n	8000c1a <main+0x8a>
	      vibration_on_time = 30;
 8000c10:	231e      	movs	r3, #30
 8000c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
	      vibration_off_time = 120;
 8000c14:	2378      	movs	r3, #120	@ 0x78
 8000c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c18:	e072      	b.n	8000d00 <main+0x170>
	  } else if (distance_cm <= 165 && distance_cm > 140) {
 8000c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c1c:	2ba5      	cmp	r3, #165	@ 0xa5
 8000c1e:	d807      	bhi.n	8000c30 <main+0xa0>
 8000c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c22:	2b8c      	cmp	r3, #140	@ 0x8c
 8000c24:	d904      	bls.n	8000c30 <main+0xa0>
	      vibration_on_time = 35;
 8000c26:	2323      	movs	r3, #35	@ 0x23
 8000c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
	      vibration_off_time = 100;
 8000c2a:	2364      	movs	r3, #100	@ 0x64
 8000c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c2e:	e067      	b.n	8000d00 <main+0x170>
	  } else if (distance_cm <= 140 && distance_cm > 125) {
 8000c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c32:	2b8c      	cmp	r3, #140	@ 0x8c
 8000c34:	d807      	bhi.n	8000c46 <main+0xb6>
 8000c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c38:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c3a:	d904      	bls.n	8000c46 <main+0xb6>
	      vibration_on_time = 40;
 8000c3c:	2328      	movs	r3, #40	@ 0x28
 8000c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	      vibration_off_time = 80;
 8000c40:	2350      	movs	r3, #80	@ 0x50
 8000c42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c44:	e05c      	b.n	8000d00 <main+0x170>
	  } else if (distance_cm <= 125 && distance_cm > 110) {
 8000c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c48:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c4a:	d807      	bhi.n	8000c5c <main+0xcc>
 8000c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c4e:	2b6e      	cmp	r3, #110	@ 0x6e
 8000c50:	d904      	bls.n	8000c5c <main+0xcc>
	      vibration_on_time = 45;
 8000c52:	232d      	movs	r3, #45	@ 0x2d
 8000c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
	      vibration_off_time = 60;
 8000c56:	233c      	movs	r3, #60	@ 0x3c
 8000c58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c5a:	e051      	b.n	8000d00 <main+0x170>
	  } else if (distance_cm <= 110 && distance_cm > 95) {
 8000c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c5e:	2b6e      	cmp	r3, #110	@ 0x6e
 8000c60:	d807      	bhi.n	8000c72 <main+0xe2>
 8000c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c64:	2b5f      	cmp	r3, #95	@ 0x5f
 8000c66:	d904      	bls.n	8000c72 <main+0xe2>
	      vibration_on_time = 50;
 8000c68:	2332      	movs	r3, #50	@ 0x32
 8000c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	      vibration_off_time = 50;
 8000c6c:	2332      	movs	r3, #50	@ 0x32
 8000c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c70:	e046      	b.n	8000d00 <main+0x170>
	  } else if (distance_cm <= 95 && distance_cm > 80) {
 8000c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c74:	2b5f      	cmp	r3, #95	@ 0x5f
 8000c76:	d807      	bhi.n	8000c88 <main+0xf8>
 8000c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c7a:	2b50      	cmp	r3, #80	@ 0x50
 8000c7c:	d904      	bls.n	8000c88 <main+0xf8>
	      vibration_on_time = 60;
 8000c7e:	233c      	movs	r3, #60	@ 0x3c
 8000c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
	      vibration_off_time = 40;
 8000c82:	2328      	movs	r3, #40	@ 0x28
 8000c84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c86:	e03b      	b.n	8000d00 <main+0x170>
	  } else if (distance_cm <= 80 && distance_cm > 65) {
 8000c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c8a:	2b50      	cmp	r3, #80	@ 0x50
 8000c8c:	d807      	bhi.n	8000c9e <main+0x10e>
 8000c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c90:	2b41      	cmp	r3, #65	@ 0x41
 8000c92:	d904      	bls.n	8000c9e <main+0x10e>
	      vibration_on_time = 70;
 8000c94:	2346      	movs	r3, #70	@ 0x46
 8000c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
	      vibration_off_time = 30;
 8000c98:	231e      	movs	r3, #30
 8000c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c9c:	e030      	b.n	8000d00 <main+0x170>
	  } else if (distance_cm <= 65 && distance_cm > 40) {
 8000c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca0:	2b41      	cmp	r3, #65	@ 0x41
 8000ca2:	d807      	bhi.n	8000cb4 <main+0x124>
 8000ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca6:	2b28      	cmp	r3, #40	@ 0x28
 8000ca8:	d904      	bls.n	8000cb4 <main+0x124>
	      vibration_on_time = 80;
 8000caa:	2350      	movs	r3, #80	@ 0x50
 8000cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
	      vibration_off_time = 20;
 8000cae:	2314      	movs	r3, #20
 8000cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cb2:	e025      	b.n	8000d00 <main+0x170>
	  } else if (distance_cm <= 40 && distance_cm > 25) {
 8000cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cb6:	2b28      	cmp	r3, #40	@ 0x28
 8000cb8:	d807      	bhi.n	8000cca <main+0x13a>
 8000cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cbc:	2b19      	cmp	r3, #25
 8000cbe:	d904      	bls.n	8000cca <main+0x13a>
	      vibration_on_time = 90;
 8000cc0:	235a      	movs	r3, #90	@ 0x5a
 8000cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	      vibration_off_time = 10;
 8000cc4:	230a      	movs	r3, #10
 8000cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cc8:	e01a      	b.n	8000d00 <main+0x170>
	  } else if (distance_cm <= 25 && distance_cm > 10) {
 8000cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ccc:	2b19      	cmp	r3, #25
 8000cce:	d807      	bhi.n	8000ce0 <main+0x150>
 8000cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cd2:	2b0a      	cmp	r3, #10
 8000cd4:	d904      	bls.n	8000ce0 <main+0x150>
	      vibration_on_time = 100;
 8000cd6:	2364      	movs	r3, #100	@ 0x64
 8000cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	      vibration_off_time = 5;  // Muy rápida cerca de 10 cm
 8000cda:	2305      	movs	r3, #5
 8000cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cde:	e00f      	b.n	8000d00 <main+0x170>
	  } else if (distance_cm <= 10) {
 8000ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ce2:	2b0a      	cmp	r3, #10
 8000ce4:	d806      	bhi.n	8000cf4 <main+0x164>
	      // Vibración constante cuando está a 10 cm o menos
	      HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2140      	movs	r1, #64	@ 0x40
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cee:	f000 fd85 	bl	80017fc <HAL_GPIO_WritePin>
 8000cf2:	e005      	b.n	8000d00 <main+0x170>
	  } else {
	      // Apagar el motor cuando está a más de 100 cm
	      HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2140      	movs	r1, #64	@ 0x40
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfc:	f000 fd7e 	bl	80017fc <HAL_GPIO_WritePin>
	  }

	  if (distance_cm > 10 && distance_cm <= 100) {
 8000d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d02:	2b0a      	cmp	r3, #10
 8000d04:	d914      	bls.n	8000d30 <main+0x1a0>
 8000d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d08:	2b64      	cmp	r3, #100	@ 0x64
 8000d0a:	d811      	bhi.n	8000d30 <main+0x1a0>
	      // Generar la vibración con los tiempos calculados
	      HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2140      	movs	r1, #64	@ 0x40
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d14:	f000 fd72 	bl	80017fc <HAL_GPIO_WritePin>
	      HAL_Delay(vibration_on_time); // Tiempo encendido
 8000d18:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000d1a:	f000 faaf 	bl	800127c <HAL_Delay>
	      HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2140      	movs	r1, #64	@ 0x40
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d26:	f000 fd69 	bl	80017fc <HAL_GPIO_WritePin>
	      HAL_Delay(vibration_off_time); // Tiempo apagado
 8000d2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000d2c:	f000 faa6 	bl	800127c <HAL_Delay>
	  }

	  // Esperar un poco antes de la siguiente medición
	  HAL_Delay(5); // Retardo mínimo entre mediciones
 8000d30:	2005      	movs	r0, #5
 8000d32:	f000 faa3 	bl	800127c <HAL_Delay>
  {
 8000d36:	e73b      	b.n	8000bb0 <main+0x20>
 8000d38:	20000078 	.word	0x20000078
 8000d3c:	08004764 	.word	0x08004764
 8000d40:	200000c4 	.word	0x200000c4

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b090      	sub	sp, #64	@ 0x40
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 0318 	add.w	r3, r7, #24
 8000d4e:	2228      	movs	r2, #40	@ 0x28
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f003 f87a 	bl	8003e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6e:	2310      	movs	r3, #16
 8000d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fd56 	bl	800182c <HAL_RCC_OscConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d86:	f000 f8d5 	bl	8000f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 fd80 	bl	80028a8 <HAL_RCC_ClockConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dae:	f000 f8c1 	bl	8000f34 <Error_Handler>
  }
}
 8000db2:	bf00      	nop
 8000db4:	3740      	adds	r7, #64	@ 0x40
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000ddc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000de0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000de4:	2247      	movs	r2, #71	@ 0x47
 8000de6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df6:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e02:	4814      	ldr	r0, [pc, #80]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000e04:	f001 ff70 	bl	8002ce8 <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e0e:	f000 f891 	bl	8000f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000e20:	f002 f910 	bl	8003044 <HAL_TIM_ConfigClockSource>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e2a:	f000 f883 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4806      	ldr	r0, [pc, #24]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000e3c:	f002 fb1c 	bl	8003478 <HAL_TIMEx_MasterConfigSynchronization>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e46:	f000 f875 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	3720      	adds	r7, #32
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000078 	.word	0x20000078

08000e58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e5e:	4a15      	ldr	r2, [pc, #84]	@ (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e62:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e64:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000e68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e9c:	f002 fb78 	bl	8003590 <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ea6:	f000 f845 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200000c4 	.word	0x200000c4
 8000eb4:	40004400 	.word	0x40004400

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ece:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <MX_GPIO_Init+0x78>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a17      	ldr	r2, [pc, #92]	@ (8000f30 <MX_GPIO_Init+0x78>)
 8000ed4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <MX_GPIO_Init+0x78>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <MX_GPIO_Init+0x78>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <MX_GPIO_Init+0x78>)
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef0:	6153      	str	r3, [r2, #20]
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <MX_GPIO_Init+0x78>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	21c0      	movs	r1, #192	@ 0xc0
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f06:	f000 fc79 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f0a:	23c0      	movs	r3, #192	@ 0xc0
 8000f0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f24:	f000 fae0 	bl	80014e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <Error_Handler+0x8>

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <HAL_MspInit+0x44>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f84 <HAL_MspInit+0x44>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6193      	str	r3, [r2, #24]
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <HAL_MspInit+0x44>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5e:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <HAL_MspInit+0x44>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a08      	ldr	r2, [pc, #32]	@ (8000f84 <HAL_MspInit+0x44>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f68:	61d3      	str	r3, [r2, #28]
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_MspInit+0x44>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f98:	d113      	bne.n	8000fc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <HAL_TIM_Base_MspInit+0x44>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <HAL_TIM_Base_MspInit+0x44>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	61d3      	str	r3, [r2, #28]
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <HAL_TIM_Base_MspInit+0x44>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	201c      	movs	r0, #28
 8000fb8:	f000 fa5f 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fbc:	201c      	movs	r0, #28
 8000fbe:	f000 fa78 	bl	80014b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a18      	ldr	r2, [pc, #96]	@ (8001050 <HAL_UART_MspInit+0x80>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d129      	bne.n	8001046 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff2:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <HAL_UART_MspInit+0x84>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <HAL_UART_MspInit+0x84>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <HAL_UART_MspInit+0x84>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <HAL_UART_MspInit+0x84>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a11      	ldr	r2, [pc, #68]	@ (8001054 <HAL_UART_MspInit+0x84>)
 8001010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <HAL_UART_MspInit+0x84>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001022:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001034:	2307      	movs	r3, #7
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001042:	f000 fa51 	bl	80014e8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	@ 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40004400 	.word	0x40004400
 8001054:	40021000 	.word	0x40021000

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <NMI_Handler+0x4>

08001060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <MemManage_Handler+0x4>

08001070 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <UsageFault_Handler+0x4>

08001080 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ae:	f000 f8c5 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <TIM2_IRQHandler+0x10>)
 80010be:	f001 febf 	bl	8002e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000078 	.word	0x20000078

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	@ (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f002 feae 	bl	8003e5c <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20003000 	.word	0x20003000
 800112c:	00000400 	.word	0x00000400
 8001130:	2000014c 	.word	0x2000014c
 8001134:	200002a0 	.word	0x200002a0

08001138 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001194 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001160:	f7ff ffea 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001164:	480c      	ldr	r0, [pc, #48]	@ (8001198 <LoopForever+0x6>)
  ldr r1, =_edata
 8001166:	490d      	ldr	r1, [pc, #52]	@ (800119c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <LoopForever+0xe>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800117c:	4c0a      	ldr	r4, [pc, #40]	@ (80011a8 <LoopForever+0x16>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118a:	f002 fe6d 	bl	8003e68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800118e:	f7ff fcff 	bl	8000b90 <main>

08001192 <LoopForever>:

LoopForever:
    b LoopForever
 8001192:	e7fe      	b.n	8001192 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001194:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011a0:	080047f4 	.word	0x080047f4
  ldr r2, =_sbss
 80011a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011a8:	2000029c 	.word	0x2000029c

080011ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC1_2_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <HAL_Init+0x28>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	@ (80011d8 <HAL_Init+0x28>)
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f94f 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f808 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f7ff feb8 	bl	8000f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40022000 	.word	0x40022000

080011dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <HAL_InitTick+0x54>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_InitTick+0x58>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f967 	bl	80014ce <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e00e      	b.n	8001228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d80a      	bhi.n	8001226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f000 f92f 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4a06      	ldr	r2, [pc, #24]	@ (8001238 <HAL_InitTick+0x5c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	20000008 	.word	0x20000008
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008
 8001260:	20000150 	.word	0x20000150

08001264 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;  
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000150 	.word	0x20000150

0800127c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001284:	f7ff ffee 	bl	8001264 <HAL_GetTick>
 8001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001294:	d005      	beq.n	80012a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001296:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <HAL_Delay+0x44>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012a2:	bf00      	nop
 80012a4:	f7ff ffde 	bl	8001264 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d8f7      	bhi.n	80012a4 <HAL_Delay+0x28>
  {
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	@ (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4907      	ldr	r1, [pc, #28]	@ (8001360 <__NVIC_EnableIRQ+0x38>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	@ (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	@ (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	@ 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	@ 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff29 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff3e 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff8e 	bl	80013b8 <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5d 	bl	8001364 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff31 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa2 	bl	8001420 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f6:	e14e      	b.n	8001796 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2101      	movs	r1, #1
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8140 	beq.w	8001790 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b01      	cmp	r3, #1
 800151a:	d005      	beq.n	8001528 <HAL_GPIO_Init+0x40>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d130      	bne.n	800158a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800155e:	2201      	movs	r2, #1
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	f003 0201 	and.w	r2, r3, #1
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b03      	cmp	r3, #3
 8001594:	d017      	beq.n	80015c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d123      	bne.n	800161a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	08da      	lsrs	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3208      	adds	r2, #8
 80015da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	08da      	lsrs	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3208      	adds	r2, #8
 8001614:	6939      	ldr	r1, [r7, #16]
 8001616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0203 	and.w	r2, r3, #3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 809a 	beq.w	8001790 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165c:	4b55      	ldr	r3, [pc, #340]	@ (80017b4 <HAL_GPIO_Init+0x2cc>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a54      	ldr	r2, [pc, #336]	@ (80017b4 <HAL_GPIO_Init+0x2cc>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b52      	ldr	r3, [pc, #328]	@ (80017b4 <HAL_GPIO_Init+0x2cc>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001674:	4a50      	ldr	r2, [pc, #320]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	220f      	movs	r2, #15
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800169e:	d013      	beq.n	80016c8 <HAL_GPIO_Init+0x1e0>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a46      	ldr	r2, [pc, #280]	@ (80017bc <HAL_GPIO_Init+0x2d4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00d      	beq.n	80016c4 <HAL_GPIO_Init+0x1dc>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a45      	ldr	r2, [pc, #276]	@ (80017c0 <HAL_GPIO_Init+0x2d8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d007      	beq.n	80016c0 <HAL_GPIO_Init+0x1d8>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a44      	ldr	r2, [pc, #272]	@ (80017c4 <HAL_GPIO_Init+0x2dc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d101      	bne.n	80016bc <HAL_GPIO_Init+0x1d4>
 80016b8:	2303      	movs	r3, #3
 80016ba:	e006      	b.n	80016ca <HAL_GPIO_Init+0x1e2>
 80016bc:	2305      	movs	r3, #5
 80016be:	e004      	b.n	80016ca <HAL_GPIO_Init+0x1e2>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0x1e2>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_GPIO_Init+0x1e2>
 80016c8:	2300      	movs	r3, #0
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	4093      	lsls	r3, r2
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016da:	4937      	ldr	r1, [pc, #220]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016e8:	4b37      	ldr	r3, [pc, #220]	@ (80017c8 <HAL_GPIO_Init+0x2e0>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800170c:	4a2e      	ldr	r2, [pc, #184]	@ (80017c8 <HAL_GPIO_Init+0x2e0>)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001712:	4b2d      	ldr	r3, [pc, #180]	@ (80017c8 <HAL_GPIO_Init+0x2e0>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001736:	4a24      	ldr	r2, [pc, #144]	@ (80017c8 <HAL_GPIO_Init+0x2e0>)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800173c:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <HAL_GPIO_Init+0x2e0>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001760:	4a19      	ldr	r2, [pc, #100]	@ (80017c8 <HAL_GPIO_Init+0x2e0>)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001766:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <HAL_GPIO_Init+0x2e0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800178a:	4a0f      	ldr	r2, [pc, #60]	@ (80017c8 <HAL_GPIO_Init+0x2e0>)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f47f aea9 	bne.w	80014f8 <HAL_GPIO_Init+0x10>
  }
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	371c      	adds	r7, #28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	48000400 	.word	0x48000400
 80017c0:	48000800 	.word	0x48000800
 80017c4:	48000c00 	.word	0x48000c00
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	887b      	ldrh	r3, [r7, #2]
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e001      	b.n	80017ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	4613      	mov	r3, r2
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001818:	e002      	b.n	8001820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001832:	af00      	add	r7, sp, #0
 8001834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001838:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800183c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800183e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001842:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	f001 b823 	b.w	8002898 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001856:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 817d 	beq.w	8001b62 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001868:	4bbc      	ldr	r3, [pc, #752]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b04      	cmp	r3, #4
 8001872:	d00c      	beq.n	800188e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001874:	4bb9      	ldr	r3, [pc, #740]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b08      	cmp	r3, #8
 800187e:	d15c      	bne.n	800193a <HAL_RCC_OscConfig+0x10e>
 8001880:	4bb6      	ldr	r3, [pc, #728]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188c:	d155      	bne.n	800193a <HAL_RCC_OscConfig+0x10e>
 800188e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001892:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	095b      	lsrs	r3, r3, #5
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d102      	bne.n	80018c0 <HAL_RCC_OscConfig+0x94>
 80018ba:	4ba8      	ldr	r3, [pc, #672]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	e015      	b.n	80018ec <HAL_RCC_OscConfig+0xc0>
 80018c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018c4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80018d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018d8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80018dc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80018e8:	4b9c      	ldr	r3, [pc, #624]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018f0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80018f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80018f8:	fa92 f2a2 	rbit	r2, r2
 80018fc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001900:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001904:	fab2 f282 	clz	r2, r2
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	f042 0220 	orr.w	r2, r2, #32
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	f002 021f 	and.w	r2, r2, #31
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 811f 	beq.w	8001b60 <HAL_RCC_OscConfig+0x334>
 8001922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001926:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 8116 	bne.w	8001b60 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	f000 bfaf 	b.w	8002898 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x12e>
 800194c:	4b83      	ldr	r3, [pc, #524]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a82      	ldr	r2, [pc, #520]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 8001952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	e036      	b.n	80019c8 <HAL_RCC_OscConfig+0x19c>
 800195a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x158>
 800196a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7b      	ldr	r2, [pc, #492]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 8001970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b79      	ldr	r3, [pc, #484]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a78      	ldr	r2, [pc, #480]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 800197c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e021      	b.n	80019c8 <HAL_RCC_OscConfig+0x19c>
 8001984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001988:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x184>
 8001996:	4b71      	ldr	r3, [pc, #452]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a70      	ldr	r2, [pc, #448]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 800199c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b6e      	ldr	r3, [pc, #440]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a6d      	ldr	r2, [pc, #436]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 80019a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e00b      	b.n	80019c8 <HAL_RCC_OscConfig+0x19c>
 80019b0:	4b6a      	ldr	r3, [pc, #424]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a69      	ldr	r2, [pc, #420]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 80019b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b67      	ldr	r3, [pc, #412]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a66      	ldr	r2, [pc, #408]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 80019c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019c6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019c8:	4b64      	ldr	r3, [pc, #400]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 80019ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019cc:	f023 020f 	bic.w	r2, r3, #15
 80019d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	495f      	ldr	r1, [pc, #380]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d059      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fc37 	bl	8001264 <HAL_GetTick>
 80019f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fc32 	bl	8001264 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b64      	cmp	r3, #100	@ 0x64
 8001a0a:	d902      	bls.n	8001a12 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	f000 bf43 	b.w	8002898 <HAL_RCC_OscConfig+0x106c>
 8001a12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a16:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001a26:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d102      	bne.n	8001a44 <HAL_RCC_OscConfig+0x218>
 8001a3e:	4b47      	ldr	r3, [pc, #284]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	e015      	b.n	8001a70 <HAL_RCC_OscConfig+0x244>
 8001a44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a48:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001a58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a5c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001a60:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a74:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001a78:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001a7c:	fa92 f2a2 	rbit	r2, r2
 8001a80:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001a84:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001a88:	fab2 f282 	clz	r2, r2
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	f042 0220 	orr.w	r2, r2, #32
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	f002 021f 	and.w	r2, r2, #31
 8001a98:	2101      	movs	r1, #1
 8001a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0ab      	beq.n	80019fc <HAL_RCC_OscConfig+0x1d0>
 8001aa4:	e05d      	b.n	8001b62 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fbdd 	bl	8001264 <HAL_GetTick>
 8001aaa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fbd8 	bl	8001264 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b64      	cmp	r3, #100	@ 0x64
 8001abe:	d902      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	f000 bee9 	b.w	8002898 <HAL_RCC_OscConfig+0x106c>
 8001ac6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aca:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001ada:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	095b      	lsrs	r3, r3, #5
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d102      	bne.n	8001af8 <HAL_RCC_OscConfig+0x2cc>
 8001af2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	e015      	b.n	8001b24 <HAL_RCC_OscConfig+0x2f8>
 8001af8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001afc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001b0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b10:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001b14:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001b20:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <HAL_RCC_OscConfig+0x330>)
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b28:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001b2c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001b30:	fa92 f2a2 	rbit	r2, r2
 8001b34:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001b38:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001b3c:	fab2 f282 	clz	r2, r2
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	f042 0220 	orr.w	r2, r2, #32
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	f002 021f 	and.w	r2, r2, #31
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ab      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x284>
 8001b58:	e003      	b.n	8001b62 <HAL_RCC_OscConfig+0x336>
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 817d 	beq.w	8001e72 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b78:	4ba6      	ldr	r3, [pc, #664]	@ (8001e14 <HAL_RCC_OscConfig+0x5e8>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00b      	beq.n	8001b9c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b84:	4ba3      	ldr	r3, [pc, #652]	@ (8001e14 <HAL_RCC_OscConfig+0x5e8>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d172      	bne.n	8001c76 <HAL_RCC_OscConfig+0x44a>
 8001b90:	4ba0      	ldr	r3, [pc, #640]	@ (8001e14 <HAL_RCC_OscConfig+0x5e8>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d16c      	bne.n	8001c76 <HAL_RCC_OscConfig+0x44a>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001bae:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	095b      	lsrs	r3, r3, #5
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d102      	bne.n	8001bcc <HAL_RCC_OscConfig+0x3a0>
 8001bc6:	4b93      	ldr	r3, [pc, #588]	@ (8001e14 <HAL_RCC_OscConfig+0x5e8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	e013      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3c8>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001bde:	2302      	movs	r3, #2
 8001be0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001be4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001bf0:	4b88      	ldr	r3, [pc, #544]	@ (8001e14 <HAL_RCC_OscConfig+0x5e8>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001bfa:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001bfe:	fa92 f2a2 	rbit	r2, r2
 8001c02:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001c06:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001c0a:	fab2 f282 	clz	r2, r2
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	f042 0220 	orr.w	r2, r2, #32
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f002 021f 	and.w	r2, r2, #31
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00a      	beq.n	8001c3c <HAL_RCC_OscConfig+0x410>
 8001c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d002      	beq.n	8001c3c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f000 be2e 	b.w	8002898 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b75      	ldr	r3, [pc, #468]	@ (8001e14 <HAL_RCC_OscConfig+0x5e8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	21f8      	movs	r1, #248	@ 0xf8
 8001c52:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001c5a:	fa91 f1a1 	rbit	r1, r1
 8001c5e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001c62:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001c66:	fab1 f181 	clz	r1, r1
 8001c6a:	b2c9      	uxtb	r1, r1
 8001c6c:	408b      	lsls	r3, r1
 8001c6e:	4969      	ldr	r1, [pc, #420]	@ (8001e14 <HAL_RCC_OscConfig+0x5e8>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c74:	e0fd      	b.n	8001e72 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8088 	beq.w	8001d98 <HAL_RCC_OscConfig+0x56c>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001c9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ca8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	461a      	mov	r2, r3
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fad6 	bl	8001264 <HAL_GetTick>
 8001cb8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cbe:	f7ff fad1 	bl	8001264 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d902      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	f000 bde2 	b.w	8002898 <HAL_RCC_OscConfig+0x106c>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001ce6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d102      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4d8>
 8001cfe:	4b45      	ldr	r3, [pc, #276]	@ (8001e14 <HAL_RCC_OscConfig+0x5e8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e013      	b.n	8001d2c <HAL_RCC_OscConfig+0x500>
 8001d04:	2302      	movs	r3, #2
 8001d06:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001d16:	2302      	movs	r3, #2
 8001d18:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001d1c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001d28:	4b3a      	ldr	r3, [pc, #232]	@ (8001e14 <HAL_RCC_OscConfig+0x5e8>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001d32:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001d36:	fa92 f2a2 	rbit	r2, r2
 8001d3a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001d3e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001d42:	fab2 f282 	clz	r2, r2
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f042 0220 	orr.w	r2, r2, #32
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	f002 021f 	and.w	r2, r2, #31
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f202 	lsl.w	r2, r1, r2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0af      	beq.n	8001cbe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e14 <HAL_RCC_OscConfig+0x5e8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	21f8      	movs	r1, #248	@ 0xf8
 8001d74:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001d7c:	fa91 f1a1 	rbit	r1, r1
 8001d80:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001d84:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001d88:	fab1 f181 	clz	r1, r1
 8001d8c:	b2c9      	uxtb	r1, r1
 8001d8e:	408b      	lsls	r3, r1
 8001d90:	4920      	ldr	r1, [pc, #128]	@ (8001e14 <HAL_RCC_OscConfig+0x5e8>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
 8001d96:	e06c      	b.n	8001e72 <HAL_RCC_OscConfig+0x646>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001daa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001db8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fa4e 	bl	8001264 <HAL_GetTick>
 8001dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff fa49 	bl	8001264 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d902      	bls.n	8001de4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	f000 bd5a 	b.w	8002898 <HAL_RCC_OscConfig+0x106c>
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d104      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5ec>
 8001e0e:	4b01      	ldr	r3, [pc, #4]	@ (8001e14 <HAL_RCC_OscConfig+0x5e8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e015      	b.n	8001e40 <HAL_RCC_OscConfig+0x614>
 8001e14:	40021000 	.word	0x40021000
 8001e18:	2302      	movs	r3, #2
 8001e1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001e30:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001e3c:	4bc8      	ldr	r3, [pc, #800]	@ (8002160 <HAL_RCC_OscConfig+0x934>)
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e40:	2202      	movs	r2, #2
 8001e42:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001e46:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001e4a:	fa92 f2a2 	rbit	r2, r2
 8001e4e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001e52:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001e56:	fab2 f282 	clz	r2, r2
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	f042 0220 	orr.w	r2, r2, #32
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	f002 021f 	and.w	r2, r2, #31
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ad      	bne.n	8001dce <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8110 	beq.w	80020a8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d079      	beq.n	8001f8c <HAL_RCC_OscConfig+0x760>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4bab      	ldr	r3, [pc, #684]	@ (8002164 <HAL_RCC_OscConfig+0x938>)
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff f9cf 	bl	8001264 <HAL_GetTick>
 8001ec6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7ff f9ca 	bl	8001264 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d902      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	f000 bcdb 	b.w	8002898 <HAL_RCC_OscConfig+0x106c>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001efc:	2202      	movs	r2, #2
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f04:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	fa93 f2a3 	rbit	r2, r3
 8001f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f20:	2202      	movs	r2, #2
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	fa93 f2a3 	rbit	r2, r3
 8001f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f3a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3c:	4b88      	ldr	r3, [pc, #544]	@ (8002160 <HAL_RCC_OscConfig+0x934>)
 8001f3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f48:	2102      	movs	r1, #2
 8001f4a:	6019      	str	r1, [r3, #0]
 8001f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	fa93 f1a3 	rbit	r1, r3
 8001f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f62:	6019      	str	r1, [r3, #0]
  return result;
 8001f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f68:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0a0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x6a0>
 8001f8a:	e08d      	b.n	80020a8 <HAL_RCC_OscConfig+0x87c>
 8001f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f90:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001faa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001fae:	601a      	str	r2, [r3, #0]
  return result;
 8001fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001fb8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b68      	ldr	r3, [pc, #416]	@ (8002164 <HAL_RCC_OscConfig+0x938>)
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2300      	movs	r3, #0
 8001fcc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7ff f949 	bl	8001264 <HAL_GetTick>
 8001fd2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd8:	f7ff f944 	bl	8001264 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d902      	bls.n	8001fee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	f000 bc55 	b.w	8002898 <HAL_RCC_OscConfig+0x106c>
 8001fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	fa93 f2a3 	rbit	r2, r3
 8002008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800201a:	2202      	movs	r2, #2
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002022:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fa93 f2a3 	rbit	r2, r3
 800202c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002030:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800203e:	2202      	movs	r2, #2
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002046:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fa93 f2a3 	rbit	r2, r3
 8002050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002054:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002058:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205a:	4b41      	ldr	r3, [pc, #260]	@ (8002160 <HAL_RCC_OscConfig+0x934>)
 800205c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800205e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002062:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002066:	2102      	movs	r1, #2
 8002068:	6019      	str	r1, [r3, #0]
 800206a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f1a3 	rbit	r1, r3
 8002078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002080:	6019      	str	r1, [r3, #0]
  return result;
 8002082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002086:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d197      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 81a1 	beq.w	8002400 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c4:	4b26      	ldr	r3, [pc, #152]	@ (8002160 <HAL_RCC_OscConfig+0x934>)
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d116      	bne.n	80020fe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d0:	4b23      	ldr	r3, [pc, #140]	@ (8002160 <HAL_RCC_OscConfig+0x934>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	4a22      	ldr	r2, [pc, #136]	@ (8002160 <HAL_RCC_OscConfig+0x934>)
 80020d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020da:	61d3      	str	r3, [r2, #28]
 80020dc:	4b20      	ldr	r3, [pc, #128]	@ (8002160 <HAL_RCC_OscConfig+0x934>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80020e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80020f6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020f8:	2301      	movs	r3, #1
 80020fa:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <HAL_RCC_OscConfig+0x93c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d11a      	bne.n	8002140 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210a:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <HAL_RCC_OscConfig+0x93c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a16      	ldr	r2, [pc, #88]	@ (8002168 <HAL_RCC_OscConfig+0x93c>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002114:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002116:	f7ff f8a5 	bl	8001264 <HAL_GetTick>
 800211a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	e009      	b.n	8002134 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002120:	f7ff f8a0 	bl	8001264 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b64      	cmp	r3, #100	@ 0x64
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e3b1      	b.n	8002898 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <HAL_RCC_OscConfig+0x93c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0ef      	beq.n	8002120 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002144:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10d      	bne.n	800216c <HAL_RCC_OscConfig+0x940>
 8002150:	4b03      	ldr	r3, [pc, #12]	@ (8002160 <HAL_RCC_OscConfig+0x934>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a02      	ldr	r2, [pc, #8]	@ (8002160 <HAL_RCC_OscConfig+0x934>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	e03c      	b.n	80021d8 <HAL_RCC_OscConfig+0x9ac>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	10908120 	.word	0x10908120
 8002168:	40007000 	.word	0x40007000
 800216c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002170:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10c      	bne.n	8002196 <HAL_RCC_OscConfig+0x96a>
 800217c:	4bc1      	ldr	r3, [pc, #772]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4ac0      	ldr	r2, [pc, #768]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	4bbe      	ldr	r3, [pc, #760]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4abd      	ldr	r2, [pc, #756]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 800218e:	f023 0304 	bic.w	r3, r3, #4
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	e020      	b.n	80021d8 <HAL_RCC_OscConfig+0x9ac>
 8002196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x994>
 80021a6:	4bb7      	ldr	r3, [pc, #732]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4ab6      	ldr	r2, [pc, #728]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	4bb4      	ldr	r3, [pc, #720]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4ab3      	ldr	r2, [pc, #716]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6213      	str	r3, [r2, #32]
 80021be:	e00b      	b.n	80021d8 <HAL_RCC_OscConfig+0x9ac>
 80021c0:	4bb0      	ldr	r3, [pc, #704]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4aaf      	ldr	r2, [pc, #700]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	4bad      	ldr	r3, [pc, #692]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4aac      	ldr	r2, [pc, #688]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 80021d2:	f023 0304 	bic.w	r3, r3, #4
 80021d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8081 	beq.w	80022ec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7ff f83b 	bl	8001264 <HAL_GetTick>
 80021ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	e00b      	b.n	800220c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7ff f836 	bl	8001264 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e345      	b.n	8002898 <HAL_RCC_OscConfig+0x106c>
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002214:	2202      	movs	r2, #2
 8002216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fa93 f2a3 	rbit	r2, r3
 8002226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002238:	2202      	movs	r2, #2
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002240:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	fa93 f2a3 	rbit	r2, r3
 800224a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002252:	601a      	str	r2, [r3, #0]
  return result;
 8002254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002258:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800225c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d102      	bne.n	8002278 <HAL_RCC_OscConfig+0xa4c>
 8002272:	4b84      	ldr	r3, [pc, #528]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	e013      	b.n	80022a0 <HAL_RCC_OscConfig+0xa74>
 8002278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002280:	2202      	movs	r2, #2
 8002282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002288:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	fa93 f2a3 	rbit	r2, r3
 8002292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002296:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	4b79      	ldr	r3, [pc, #484]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022a4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80022a8:	2102      	movs	r1, #2
 80022aa:	6011      	str	r1, [r2, #0]
 80022ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022b0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	fa92 f1a2 	rbit	r1, r2
 80022ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022be:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80022c2:	6011      	str	r1, [r2, #0]
  return result;
 80022c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022c8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	fab2 f282 	clz	r2, r2
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f002 021f 	and.w	r2, r2, #31
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d084      	beq.n	80021f4 <HAL_RCC_OscConfig+0x9c8>
 80022ea:	e07f      	b.n	80023ec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7fe ffba 	bl	8001264 <HAL_GetTick>
 80022f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f4:	e00b      	b.n	800230e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7fe ffb5 	bl	8001264 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e2c4      	b.n	8002898 <HAL_RCC_OscConfig+0x106c>
 800230e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002312:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002316:	2202      	movs	r2, #2
 8002318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002336:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800233a:	2202      	movs	r2, #2
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002342:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	fa93 f2a3 	rbit	r2, r3
 800234c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002350:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002354:	601a      	str	r2, [r3, #0]
  return result;
 8002356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800235e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f043 0302 	orr.w	r3, r3, #2
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d102      	bne.n	800237a <HAL_RCC_OscConfig+0xb4e>
 8002374:	4b43      	ldr	r3, [pc, #268]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	e013      	b.n	80023a2 <HAL_RCC_OscConfig+0xb76>
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002382:	2202      	movs	r2, #2
 8002384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	fa93 f2a3 	rbit	r2, r3
 8002394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002398:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	4b39      	ldr	r3, [pc, #228]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023a6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80023aa:	2102      	movs	r1, #2
 80023ac:	6011      	str	r1, [r2, #0]
 80023ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023b2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	fa92 f1a2 	rbit	r1, r2
 80023bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023c0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80023c4:	6011      	str	r1, [r2, #0]
  return result;
 80023c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023ca:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	fab2 f282 	clz	r2, r2
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	f002 021f 	and.w	r2, r2, #31
 80023e0:	2101      	movs	r1, #1
 80023e2:	fa01 f202 	lsl.w	r2, r1, r2
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d184      	bne.n	80022f6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f4:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	4a22      	ldr	r2, [pc, #136]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 80023fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002404:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8242 	beq.w	8002896 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002412:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <HAL_RCC_OscConfig+0xc58>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b08      	cmp	r3, #8
 800241c:	f000 8213 	beq.w	8002846 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002424:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	2b02      	cmp	r3, #2
 800242e:	f040 8162 	bne.w	80026f6 <HAL_RCC_OscConfig+0xeca>
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800243a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800243e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002444:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	fa93 f2a3 	rbit	r2, r3
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002456:	601a      	str	r2, [r3, #0]
  return result;
 8002458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002460:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800246c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	461a      	mov	r2, r3
 8002474:	2300      	movs	r3, #0
 8002476:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7fe fef4 	bl	8001264 <HAL_GetTick>
 800247c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002480:	e00c      	b.n	800249c <HAL_RCC_OscConfig+0xc70>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe feec 	bl	8001264 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1fd      	b.n	8002898 <HAL_RCC_OscConfig+0x106c>
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80024a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ae:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fa93 f2a3 	rbit	r2, r3
 80024b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80024c0:	601a      	str	r2, [r3, #0]
  return result;
 80024c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80024ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d102      	bne.n	80024e6 <HAL_RCC_OscConfig+0xcba>
 80024e0:	4bb0      	ldr	r3, [pc, #704]	@ (80027a4 <HAL_RCC_OscConfig+0xf78>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	e027      	b.n	8002536 <HAL_RCC_OscConfig+0xd0a>
 80024e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ea:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80024ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002506:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002514:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fa93 f2a3 	rbit	r2, r3
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	4b9c      	ldr	r3, [pc, #624]	@ (80027a4 <HAL_RCC_OscConfig+0xf78>)
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800253a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800253e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002542:	6011      	str	r1, [r2, #0]
 8002544:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002548:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	fa92 f1a2 	rbit	r1, r2
 8002552:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002556:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800255a:	6011      	str	r1, [r2, #0]
  return result;
 800255c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002560:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	fab2 f282 	clz	r2, r2
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	f042 0220 	orr.w	r2, r2, #32
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	f002 021f 	and.w	r2, r2, #31
 8002576:	2101      	movs	r1, #1
 8002578:	fa01 f202 	lsl.w	r2, r1, r2
 800257c:	4013      	ands	r3, r2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d182      	bne.n	8002488 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002582:	4b88      	ldr	r3, [pc, #544]	@ (80027a4 <HAL_RCC_OscConfig+0xf78>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800258a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	430b      	orrs	r3, r1
 80025a4:	497f      	ldr	r1, [pc, #508]	@ (80027a4 <HAL_RCC_OscConfig+0xf78>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	604b      	str	r3, [r1, #4]
 80025aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ae:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80025b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025bc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	fa93 f2a3 	rbit	r2, r3
 80025c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ca:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80025ce:	601a      	str	r2, [r3, #0]
  return result;
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80025d8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	461a      	mov	r2, r3
 80025ec:	2301      	movs	r3, #1
 80025ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fe38 	bl	8001264 <HAL_GetTick>
 80025f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f8:	e009      	b.n	800260e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe fe33 	bl	8001264 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e144      	b.n	8002898 <HAL_RCC_OscConfig+0x106c>
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002616:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800261a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	fa93 f2a3 	rbit	r2, r3
 800262a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002632:	601a      	str	r2, [r3, #0]
  return result;
 8002634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002638:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800263c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d102      	bne.n	8002658 <HAL_RCC_OscConfig+0xe2c>
 8002652:	4b54      	ldr	r3, [pc, #336]	@ (80027a4 <HAL_RCC_OscConfig+0xf78>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	e027      	b.n	80026a8 <HAL_RCC_OscConfig+0xe7c>
 8002658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002660:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	fa93 f2a3 	rbit	r2, r3
 8002674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002678:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002682:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002686:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002690:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	fa93 f2a3 	rbit	r2, r3
 800269a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	4b3f      	ldr	r3, [pc, #252]	@ (80027a4 <HAL_RCC_OscConfig+0xf78>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ac:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80026b0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026b4:	6011      	str	r1, [r2, #0]
 80026b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ba:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	fa92 f1a2 	rbit	r1, r2
 80026c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026c8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80026cc:	6011      	str	r1, [r2, #0]
  return result;
 80026ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026d2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	fab2 f282 	clz	r2, r2
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f042 0220 	orr.w	r2, r2, #32
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	f002 021f 	and.w	r2, r2, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d082      	beq.n	80025fa <HAL_RCC_OscConfig+0xdce>
 80026f4:	e0cf      	b.n	8002896 <HAL_RCC_OscConfig+0x106a>
 80026f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fa:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80026fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002708:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002716:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800271a:	601a      	str	r2, [r3, #0]
  return result;
 800271c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002720:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002724:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002730:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	461a      	mov	r2, r3
 8002738:	2300      	movs	r3, #0
 800273a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe fd92 	bl	8001264 <HAL_GetTick>
 8002740:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	e009      	b.n	800275a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe fd8d 	bl	8001264 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e09e      	b.n	8002898 <HAL_RCC_OscConfig+0x106c>
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002762:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	fa93 f2a3 	rbit	r2, r3
 8002776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800277e:	601a      	str	r2, [r3, #0]
  return result;
 8002780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002784:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002788:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d104      	bne.n	80027a8 <HAL_RCC_OscConfig+0xf7c>
 800279e:	4b01      	ldr	r3, [pc, #4]	@ (80027a4 <HAL_RCC_OscConfig+0xf78>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e029      	b.n	80027f8 <HAL_RCC_OscConfig+0xfcc>
 80027a4:	40021000 	.word	0x40021000
 80027a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ac:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80027b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80027d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ee:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	4b2b      	ldr	r3, [pc, #172]	@ (80028a4 <HAL_RCC_OscConfig+0x1078>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027fc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002800:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002804:	6011      	str	r1, [r2, #0]
 8002806:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800280a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	fa92 f1a2 	rbit	r1, r2
 8002814:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002818:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800281c:	6011      	str	r1, [r2, #0]
  return result;
 800281e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002822:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	fab2 f282 	clz	r2, r2
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f042 0220 	orr.w	r2, r2, #32
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f002 021f 	and.w	r2, r2, #31
 8002838:	2101      	movs	r1, #1
 800283a:	fa01 f202 	lsl.w	r2, r1, r2
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d180      	bne.n	8002746 <HAL_RCC_OscConfig+0xf1a>
 8002844:	e027      	b.n	8002896 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e01e      	b.n	8002898 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800285a:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <HAL_RCC_OscConfig+0x1078>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002862:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002866:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800286a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	429a      	cmp	r2, r3
 8002878:	d10b      	bne.n	8002892 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800287a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800287e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002886:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800288e:	429a      	cmp	r2, r3
 8002890:	d001      	beq.n	8002896 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000

080028a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b09e      	sub	sp, #120	@ 0x78
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e162      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c0:	4b90      	ldr	r3, [pc, #576]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d910      	bls.n	80028f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 0207 	bic.w	r2, r3, #7
 80028d6:	498b      	ldr	r1, [pc, #556]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b89      	ldr	r3, [pc, #548]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e14a      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028fc:	4b82      	ldr	r3, [pc, #520]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	497f      	ldr	r1, [pc, #508]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80dc 	beq.w	8002ad4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d13c      	bne.n	800299e <HAL_RCC_ClockConfig+0xf6>
 8002924:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002928:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002932:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d102      	bne.n	800294e <HAL_RCC_ClockConfig+0xa6>
 8002948:	4b6f      	ldr	r3, [pc, #444]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	e00f      	b.n	800296e <HAL_RCC_ClockConfig+0xc6>
 800294e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002952:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	667b      	str	r3, [r7, #100]	@ 0x64
 800295c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002960:	663b      	str	r3, [r7, #96]	@ 0x60
 8002962:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800296a:	4b67      	ldr	r3, [pc, #412]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002972:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002974:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002976:	fa92 f2a2 	rbit	r2, r2
 800297a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800297c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800297e:	fab2 f282 	clz	r2, r2
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	f042 0220 	orr.w	r2, r2, #32
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	f002 021f 	and.w	r2, r2, #31
 800298e:	2101      	movs	r1, #1
 8002990:	fa01 f202 	lsl.w	r2, r1, r2
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d17b      	bne.n	8002a92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0f3      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d13c      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x178>
 80029a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029aa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80029b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d102      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x128>
 80029ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	e00f      	b.n	80029f0 <HAL_RCC_ClockConfig+0x148>
 80029d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80029de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80029e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ec:	4b46      	ldr	r3, [pc, #280]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029f4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80029f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029f8:	fa92 f2a2 	rbit	r2, r2
 80029fc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80029fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a00:	fab2 f282 	clz	r2, r2
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	f042 0220 	orr.w	r2, r2, #32
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	f002 021f 	and.w	r2, r2, #31
 8002a10:	2101      	movs	r1, #1
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d13a      	bne.n	8002a92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0b2      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
 8002a20:	2302      	movs	r3, #2
 8002a22:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d102      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x1a0>
 8002a42:	4b31      	ldr	r3, [pc, #196]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	e00d      	b.n	8002a64 <HAL_RCC_ClockConfig+0x1bc>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a54:	2302      	movs	r3, #2
 8002a56:	623b      	str	r3, [r7, #32]
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	4b29      	ldr	r3, [pc, #164]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	2202      	movs	r2, #2
 8002a66:	61ba      	str	r2, [r7, #24]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	fa92 f2a2 	rbit	r2, r2
 8002a6e:	617a      	str	r2, [r7, #20]
  return result;
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	fab2 f282 	clz	r2, r2
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	f042 0220 	orr.w	r2, r2, #32
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f002 021f 	and.w	r2, r2, #31
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f202 	lsl.w	r2, r1, r2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e079      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a92:	4b1d      	ldr	r3, [pc, #116]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f023 0203 	bic.w	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	491a      	ldr	r1, [pc, #104]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa4:	f7fe fbde 	bl	8001264 <HAL_GetTick>
 8002aa8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aac:	f7fe fbda 	bl	8001264 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e061      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <HAL_RCC_ClockConfig+0x260>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 020c 	and.w	r2, r3, #12
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d1eb      	bne.n	8002aac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d214      	bcs.n	8002b0c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 0207 	bic.w	r2, r3, #7
 8002aea:	4906      	ldr	r1, [pc, #24]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b04      	ldr	r3, [pc, #16]	@ (8002b04 <HAL_RCC_ClockConfig+0x25c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e040      	b.n	8002b86 <HAL_RCC_ClockConfig+0x2de>
 8002b04:	40022000 	.word	0x40022000
 8002b08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <HAL_RCC_ClockConfig+0x2e8>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	491a      	ldr	r1, [pc, #104]	@ (8002b90 <HAL_RCC_ClockConfig+0x2e8>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b36:	4b16      	ldr	r3, [pc, #88]	@ (8002b90 <HAL_RCC_ClockConfig+0x2e8>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4912      	ldr	r1, [pc, #72]	@ (8002b90 <HAL_RCC_ClockConfig+0x2e8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b4a:	f000 f829 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8002b4e:	4601      	mov	r1, r0
 8002b50:	4b0f      	ldr	r3, [pc, #60]	@ (8002b90 <HAL_RCC_ClockConfig+0x2e8>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b58:	22f0      	movs	r2, #240	@ 0xf0
 8002b5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	fa92 f2a2 	rbit	r2, r2
 8002b62:	60fa      	str	r2, [r7, #12]
  return result;
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	fab2 f282 	clz	r2, r2
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	40d3      	lsrs	r3, r2
 8002b6e:	4a09      	ldr	r2, [pc, #36]	@ (8002b94 <HAL_RCC_ClockConfig+0x2ec>)
 8002b70:	5cd3      	ldrb	r3, [r2, r3]
 8002b72:	fa21 f303 	lsr.w	r3, r1, r3
 8002b76:	4a08      	ldr	r2, [pc, #32]	@ (8002b98 <HAL_RCC_ClockConfig+0x2f0>)
 8002b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b7a:	4b08      	ldr	r3, [pc, #32]	@ (8002b9c <HAL_RCC_ClockConfig+0x2f4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe fb2c 	bl	80011dc <HAL_InitTick>
  
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3778      	adds	r7, #120	@ 0x78
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	08004778 	.word	0x08004778
 8002b98:	20000000 	.word	0x20000000
 8002b9c:	20000004 	.word	0x20000004

08002ba0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002bba:	4b1e      	ldr	r3, [pc, #120]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x30>
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x36>
 8002bce:	e026      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bd0:	4b19      	ldr	r3, [pc, #100]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd2:	613b      	str	r3, [r7, #16]
      break;
 8002bd4:	e026      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	0c9b      	lsrs	r3, r3, #18
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	4a17      	ldr	r2, [pc, #92]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002be4:	4b13      	ldr	r3, [pc, #76]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x94>)
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	4a14      	ldr	r2, [pc, #80]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bfc:	4a0e      	ldr	r2, [pc, #56]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e004      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a0c      	ldr	r2, [pc, #48]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	613b      	str	r3, [r7, #16]
      break;
 8002c1c:	e002      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c20:	613b      	str	r3, [r7, #16]
      break;
 8002c22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c24:	693b      	ldr	r3, [r7, #16]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	007a1200 	.word	0x007a1200
 8002c3c:	08004790 	.word	0x08004790
 8002c40:	080047a0 	.word	0x080047a0
 8002c44:	003d0900 	.word	0x003d0900

08002c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000000 	.word	0x20000000

08002c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c66:	f7ff ffef 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c74:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002c78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	fa92 f2a2 	rbit	r2, r2
 8002c80:	603a      	str	r2, [r7, #0]
  return result;
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	fab2 f282 	clz	r2, r2
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	40d3      	lsrs	r3, r2
 8002c8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ca0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08004788 	.word	0x08004788

08002ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002caa:	f7ff ffcd 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002cae:	4601      	mov	r1, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002cb8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002cbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	fa92 f2a2 	rbit	r2, r2
 8002cc4:	603a      	str	r2, [r7, #0]
  return result;
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	fab2 f282 	clz	r2, r2
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	40d3      	lsrs	r3, r2
 8002cd0:	4a04      	ldr	r2, [pc, #16]	@ (8002ce4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cd2:	5cd3      	ldrb	r3, [r2, r3]
 8002cd4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	08004788 	.word	0x08004788

08002ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e049      	b.n	8002d8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe f93a 	bl	8000f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f000 fa88 	bl	800323c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d001      	beq.n	8002db0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e038      	b.n	8002e22 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e30 <HAL_TIM_Base_Start+0x98>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00e      	beq.n	8002de0 <HAL_TIM_Base_Start+0x48>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dca:	d009      	beq.n	8002de0 <HAL_TIM_Base_Start+0x48>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a18      	ldr	r2, [pc, #96]	@ (8002e34 <HAL_TIM_Base_Start+0x9c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_TIM_Base_Start+0x48>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a17      	ldr	r2, [pc, #92]	@ (8002e38 <HAL_TIM_Base_Start+0xa0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d115      	bne.n	8002e0c <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	4b15      	ldr	r3, [pc, #84]	@ (8002e3c <HAL_TIM_Base_Start+0xa4>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d015      	beq.n	8002e1e <HAL_TIM_Base_Start+0x86>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df8:	d011      	beq.n	8002e1e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0a:	e008      	b.n	8002e1e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e000      	b.n	8002e20 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40014000 	.word	0x40014000
 8002e3c:	00010007 	.word	0x00010007

08002e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d020      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01b      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0202 	mvn.w	r2, #2
 8002e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f9b7 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002e90:	e005      	b.n	8002e9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f9a9 	bl	80031ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f9ba 	bl	8003212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d020      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01b      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0204 	mvn.w	r2, #4
 8002ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f991 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f983 	bl	80031ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f994 	bl	8003212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d020      	beq.n	8002f3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01b      	beq.n	8002f3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0208 	mvn.w	r2, #8
 8002f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2204      	movs	r2, #4
 8002f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f96b 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f95d 	bl	80031ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f96e 	bl	8003212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d020      	beq.n	8002f88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01b      	beq.n	8002f88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0210 	mvn.w	r2, #16
 8002f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f945 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002f74:	e005      	b.n	8002f82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f937 	bl	80031ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f948 	bl	8003212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d007      	beq.n	8002fac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0201 	mvn.w	r2, #1
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f915 	bl	80031d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 facc 	bl	8003568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00c      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fac4 	bl	800357c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f907 	bl	8003226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00c      	beq.n	800303c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0220 	mvn.w	r2, #32
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fa8c 	bl	8003554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_TIM_ConfigClockSource+0x1c>
 800305c:	2302      	movs	r3, #2
 800305e:	e0b6      	b.n	80031ce <HAL_TIM_ConfigClockSource+0x18a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800307e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800308a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800309c:	d03e      	beq.n	800311c <HAL_TIM_ConfigClockSource+0xd8>
 800309e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030a2:	f200 8087 	bhi.w	80031b4 <HAL_TIM_ConfigClockSource+0x170>
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030aa:	f000 8086 	beq.w	80031ba <HAL_TIM_ConfigClockSource+0x176>
 80030ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b2:	d87f      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x170>
 80030b4:	2b70      	cmp	r3, #112	@ 0x70
 80030b6:	d01a      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0xaa>
 80030b8:	2b70      	cmp	r3, #112	@ 0x70
 80030ba:	d87b      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x170>
 80030bc:	2b60      	cmp	r3, #96	@ 0x60
 80030be:	d050      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x11e>
 80030c0:	2b60      	cmp	r3, #96	@ 0x60
 80030c2:	d877      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x170>
 80030c4:	2b50      	cmp	r3, #80	@ 0x50
 80030c6:	d03c      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0xfe>
 80030c8:	2b50      	cmp	r3, #80	@ 0x50
 80030ca:	d873      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x170>
 80030cc:	2b40      	cmp	r3, #64	@ 0x40
 80030ce:	d058      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x13e>
 80030d0:	2b40      	cmp	r3, #64	@ 0x40
 80030d2:	d86f      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x170>
 80030d4:	2b30      	cmp	r3, #48	@ 0x30
 80030d6:	d064      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x15e>
 80030d8:	2b30      	cmp	r3, #48	@ 0x30
 80030da:	d86b      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x170>
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d060      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x15e>
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d867      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x170>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d05c      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x15e>
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d05a      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x15e>
 80030ec:	e062      	b.n	80031b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030fe:	f000 f99b 	bl	8003438 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	609a      	str	r2, [r3, #8]
      break;
 800311a:	e04f      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800312c:	f000 f984 	bl	8003438 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800313e:	609a      	str	r2, [r3, #8]
      break;
 8003140:	e03c      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800314e:	461a      	mov	r2, r3
 8003150:	f000 f8f8 	bl	8003344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2150      	movs	r1, #80	@ 0x50
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f951 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 8003160:	e02c      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800316e:	461a      	mov	r2, r3
 8003170:	f000 f917 	bl	80033a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2160      	movs	r1, #96	@ 0x60
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f941 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 8003180:	e01c      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800318e:	461a      	mov	r2, r3
 8003190:	f000 f8d8 	bl	8003344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2140      	movs	r1, #64	@ 0x40
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f931 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 80031a0:	e00c      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4619      	mov	r1, r3
 80031ac:	4610      	mov	r0, r2
 80031ae:	f000 f928 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 80031b2:	e003      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
      break;
 80031b8:	e000      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80031ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a38      	ldr	r2, [pc, #224]	@ (8003330 <TIM_Base_SetConfig+0xf4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <TIM_Base_SetConfig+0x28>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800325a:	d003      	beq.n	8003264 <TIM_Base_SetConfig+0x28>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a35      	ldr	r2, [pc, #212]	@ (8003334 <TIM_Base_SetConfig+0xf8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d108      	bne.n	8003276 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2d      	ldr	r2, [pc, #180]	@ (8003330 <TIM_Base_SetConfig+0xf4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <TIM_Base_SetConfig+0x6a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003284:	d00f      	beq.n	80032a6 <TIM_Base_SetConfig+0x6a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a2a      	ldr	r2, [pc, #168]	@ (8003334 <TIM_Base_SetConfig+0xf8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00b      	beq.n	80032a6 <TIM_Base_SetConfig+0x6a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a29      	ldr	r2, [pc, #164]	@ (8003338 <TIM_Base_SetConfig+0xfc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <TIM_Base_SetConfig+0x6a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a28      	ldr	r2, [pc, #160]	@ (800333c <TIM_Base_SetConfig+0x100>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d003      	beq.n	80032a6 <TIM_Base_SetConfig+0x6a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a27      	ldr	r2, [pc, #156]	@ (8003340 <TIM_Base_SetConfig+0x104>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d108      	bne.n	80032b8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a14      	ldr	r2, [pc, #80]	@ (8003330 <TIM_Base_SetConfig+0xf4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00b      	beq.n	80032fc <TIM_Base_SetConfig+0xc0>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a14      	ldr	r2, [pc, #80]	@ (8003338 <TIM_Base_SetConfig+0xfc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d007      	beq.n	80032fc <TIM_Base_SetConfig+0xc0>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a13      	ldr	r2, [pc, #76]	@ (800333c <TIM_Base_SetConfig+0x100>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <TIM_Base_SetConfig+0xc0>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a12      	ldr	r2, [pc, #72]	@ (8003340 <TIM_Base_SetConfig+0x104>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d103      	bne.n	8003304 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b01      	cmp	r3, #1
 8003314:	d105      	bne.n	8003322 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f023 0201 	bic.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	611a      	str	r2, [r3, #16]
  }
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40000400 	.word	0x40000400
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800

08003344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f023 0201 	bic.w	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800336e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 030a 	bic.w	r3, r3, #10
 8003380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b087      	sub	sp, #28
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f023 0210 	bic.w	r2, r3, #16
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	031b      	lsls	r3, r3, #12
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	621a      	str	r2, [r3, #32]
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	f043 0307 	orr.w	r3, r3, #7
 8003424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	609a      	str	r2, [r3, #8]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	021a      	lsls	r2, r3, #8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	431a      	orrs	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4313      	orrs	r3, r2
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	609a      	str	r2, [r3, #8]
}
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800348c:	2302      	movs	r3, #2
 800348e:	e054      	b.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a24      	ldr	r2, [pc, #144]	@ (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d108      	bne.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80034c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a17      	ldr	r2, [pc, #92]	@ (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00e      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f8:	d009      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a13      	ldr	r2, [pc, #76]	@ (800354c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a11      	ldr	r2, [pc, #68]	@ (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10c      	bne.n	8003528 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	4313      	orrs	r3, r2
 800351e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40012c00 	.word	0x40012c00
 800354c:	40000400 	.word	0x40000400
 8003550:	40014000 	.word	0x40014000

08003554 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e040      	b.n	8003624 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fd0c 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2224      	movs	r2, #36	@ 0x24
 80035bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f9e8 	bl	80039ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f8af 	bl	8003740 <UART_SetConfig>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e01b      	b.n	8003624 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800360a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fa67 	bl	8003af0 <UART_CheckIdleState>
 8003622:	4603      	mov	r3, r0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	@ 0x28
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003640:	2b20      	cmp	r3, #32
 8003642:	d177      	bne.n	8003734 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_UART_Transmit+0x24>
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e070      	b.n	8003736 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2221      	movs	r2, #33	@ 0x21
 8003660:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003662:	f7fd fdff 	bl	8001264 <HAL_GetTick>
 8003666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	88fa      	ldrh	r2, [r7, #6]
 800366c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003680:	d108      	bne.n	8003694 <HAL_UART_Transmit+0x68>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d104      	bne.n	8003694 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	e003      	b.n	800369c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003698:	2300      	movs	r3, #0
 800369a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800369c:	e02f      	b.n	80036fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2180      	movs	r1, #128	@ 0x80
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fac9 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e03b      	b.n	8003736 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10b      	bne.n	80036dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	881a      	ldrh	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d0:	b292      	uxth	r2, r2
 80036d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	3302      	adds	r3, #2
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	e007      	b.n	80036ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	781a      	ldrb	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3301      	adds	r3, #1
 80036ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1c9      	bne.n	800369e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2200      	movs	r2, #0
 8003712:	2140      	movs	r1, #64	@ 0x40
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 fa93 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e005      	b.n	8003736 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e000      	b.n	8003736 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b8a      	ldr	r3, [pc, #552]	@ (8003994 <UART_SetConfig+0x254>)
 800376c:	4013      	ands	r3, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	6979      	ldr	r1, [r7, #20]
 8003774:	430b      	orrs	r3, r1
 8003776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a78      	ldr	r2, [pc, #480]	@ (8003998 <UART_SetConfig+0x258>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d120      	bne.n	80037fe <UART_SetConfig+0xbe>
 80037bc:	4b77      	ldr	r3, [pc, #476]	@ (800399c <UART_SetConfig+0x25c>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d817      	bhi.n	80037f8 <UART_SetConfig+0xb8>
 80037c8:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <UART_SetConfig+0x90>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037ed 	.word	0x080037ed
 80037d8:	080037f3 	.word	0x080037f3
 80037dc:	080037e7 	.word	0x080037e7
 80037e0:	2300      	movs	r3, #0
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e01d      	b.n	8003822 <UART_SetConfig+0xe2>
 80037e6:	2302      	movs	r3, #2
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e01a      	b.n	8003822 <UART_SetConfig+0xe2>
 80037ec:	2304      	movs	r3, #4
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e017      	b.n	8003822 <UART_SetConfig+0xe2>
 80037f2:	2308      	movs	r3, #8
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e014      	b.n	8003822 <UART_SetConfig+0xe2>
 80037f8:	2310      	movs	r3, #16
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e011      	b.n	8003822 <UART_SetConfig+0xe2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a67      	ldr	r2, [pc, #412]	@ (80039a0 <UART_SetConfig+0x260>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d102      	bne.n	800380e <UART_SetConfig+0xce>
 8003808:	2300      	movs	r3, #0
 800380a:	77fb      	strb	r3, [r7, #31]
 800380c:	e009      	b.n	8003822 <UART_SetConfig+0xe2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a64      	ldr	r2, [pc, #400]	@ (80039a4 <UART_SetConfig+0x264>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d102      	bne.n	800381e <UART_SetConfig+0xde>
 8003818:	2300      	movs	r3, #0
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	e001      	b.n	8003822 <UART_SetConfig+0xe2>
 800381e:	2310      	movs	r3, #16
 8003820:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800382a:	d15a      	bne.n	80038e2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800382c:	7ffb      	ldrb	r3, [r7, #31]
 800382e:	2b08      	cmp	r3, #8
 8003830:	d827      	bhi.n	8003882 <UART_SetConfig+0x142>
 8003832:	a201      	add	r2, pc, #4	@ (adr r2, 8003838 <UART_SetConfig+0xf8>)
 8003834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003838:	0800385d 	.word	0x0800385d
 800383c:	08003865 	.word	0x08003865
 8003840:	0800386d 	.word	0x0800386d
 8003844:	08003883 	.word	0x08003883
 8003848:	08003873 	.word	0x08003873
 800384c:	08003883 	.word	0x08003883
 8003850:	08003883 	.word	0x08003883
 8003854:	08003883 	.word	0x08003883
 8003858:	0800387b 	.word	0x0800387b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800385c:	f7ff fa00 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8003860:	61b8      	str	r0, [r7, #24]
        break;
 8003862:	e013      	b.n	800388c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003864:	f7ff fa1e 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8003868:	61b8      	str	r0, [r7, #24]
        break;
 800386a:	e00f      	b.n	800388c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800386c:	4b4e      	ldr	r3, [pc, #312]	@ (80039a8 <UART_SetConfig+0x268>)
 800386e:	61bb      	str	r3, [r7, #24]
        break;
 8003870:	e00c      	b.n	800388c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003872:	f7ff f995 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8003876:	61b8      	str	r0, [r7, #24]
        break;
 8003878:	e008      	b.n	800388c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800387e:	61bb      	str	r3, [r7, #24]
        break;
 8003880:	e004      	b.n	800388c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	77bb      	strb	r3, [r7, #30]
        break;
 800388a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d074      	beq.n	800397c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	005a      	lsls	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	441a      	add	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b0f      	cmp	r3, #15
 80038ac:	d916      	bls.n	80038dc <UART_SetConfig+0x19c>
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038b4:	d212      	bcs.n	80038dc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f023 030f 	bic.w	r3, r3, #15
 80038be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	89fb      	ldrh	r3, [r7, #14]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	89fa      	ldrh	r2, [r7, #14]
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	e04f      	b.n	800397c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	77bb      	strb	r3, [r7, #30]
 80038e0:	e04c      	b.n	800397c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038e2:	7ffb      	ldrb	r3, [r7, #31]
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d828      	bhi.n	800393a <UART_SetConfig+0x1fa>
 80038e8:	a201      	add	r2, pc, #4	@ (adr r2, 80038f0 <UART_SetConfig+0x1b0>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003915 	.word	0x08003915
 80038f4:	0800391d 	.word	0x0800391d
 80038f8:	08003925 	.word	0x08003925
 80038fc:	0800393b 	.word	0x0800393b
 8003900:	0800392b 	.word	0x0800392b
 8003904:	0800393b 	.word	0x0800393b
 8003908:	0800393b 	.word	0x0800393b
 800390c:	0800393b 	.word	0x0800393b
 8003910:	08003933 	.word	0x08003933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003914:	f7ff f9a4 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8003918:	61b8      	str	r0, [r7, #24]
        break;
 800391a:	e013      	b.n	8003944 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800391c:	f7ff f9c2 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8003920:	61b8      	str	r0, [r7, #24]
        break;
 8003922:	e00f      	b.n	8003944 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003924:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <UART_SetConfig+0x268>)
 8003926:	61bb      	str	r3, [r7, #24]
        break;
 8003928:	e00c      	b.n	8003944 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800392a:	f7ff f939 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 800392e:	61b8      	str	r0, [r7, #24]
        break;
 8003930:	e008      	b.n	8003944 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003936:	61bb      	str	r3, [r7, #24]
        break;
 8003938:	e004      	b.n	8003944 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	77bb      	strb	r3, [r7, #30]
        break;
 8003942:	bf00      	nop
    }

    if (pclk != 0U)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d018      	beq.n	800397c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	085a      	lsrs	r2, r3, #1
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	441a      	add	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b0f      	cmp	r3, #15
 8003962:	d909      	bls.n	8003978 <UART_SetConfig+0x238>
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396a:	d205      	bcs.n	8003978 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	e001      	b.n	800397c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003988:	7fbb      	ldrb	r3, [r7, #30]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	efff69f3 	.word	0xefff69f3
 8003998:	40013800 	.word	0x40013800
 800399c:	40021000 	.word	0x40021000
 80039a0:	40004400 	.word	0x40004400
 80039a4:	40004800 	.word	0x40004800
 80039a8:	007a1200 	.word	0x007a1200

080039ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01a      	beq.n	8003ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aaa:	d10a      	bne.n	8003ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b098      	sub	sp, #96	@ 0x60
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b00:	f7fd fbb0 	bl	8001264 <HAL_GetTick>
 8003b04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d12e      	bne.n	8003b72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f88c 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d021      	beq.n	8003b72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b36:	e853 3f00 	ldrex	r3, [r3]
 8003b3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b42:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e6      	bne.n	8003b2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e062      	b.n	8003c38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d149      	bne.n	8003c14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f856 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d03c      	beq.n	8003c14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e6      	bne.n	8003b9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	e853 3f00 	ldrex	r3, [r3]
 8003bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3308      	adds	r3, #8
 8003bea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bec:	61fa      	str	r2, [r7, #28]
 8003bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	69b9      	ldr	r1, [r7, #24]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e5      	bne.n	8003bcc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e011      	b.n	8003c38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3758      	adds	r7, #88	@ 0x58
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c50:	e04f      	b.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d04b      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7fd fb03 	bl	8001264 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e04e      	b.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d037      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b80      	cmp	r3, #128	@ 0x80
 8003c86:	d034      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b40      	cmp	r3, #64	@ 0x40
 8003c8c:	d031      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d110      	bne.n	8003cbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 f838 	bl	8003d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2208      	movs	r2, #8
 8003cae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e029      	b.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ccc:	d111      	bne.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f81e 	bl	8003d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e00f      	b.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	bf0c      	ite	eq
 8003d02:	2301      	moveq	r3, #1
 8003d04:	2300      	movne	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d0a0      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b095      	sub	sp, #84	@ 0x54
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e6      	bne.n	8003d22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3308      	adds	r3, #8
 8003d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3308      	adds	r3, #8
 8003d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e5      	bne.n	8003d54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d118      	bne.n	8003dc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f023 0310 	bic.w	r3, r3, #16
 8003da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6979      	ldr	r1, [r7, #20]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	613b      	str	r3, [r7, #16]
   return(result);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e6      	bne.n	8003d90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003dd6:	bf00      	nop
 8003dd8:	3754      	adds	r7, #84	@ 0x54
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <sniprintf>:
 8003de4:	b40c      	push	{r2, r3}
 8003de6:	b530      	push	{r4, r5, lr}
 8003de8:	4b17      	ldr	r3, [pc, #92]	@ (8003e48 <sniprintf+0x64>)
 8003dea:	1e0c      	subs	r4, r1, #0
 8003dec:	681d      	ldr	r5, [r3, #0]
 8003dee:	b09d      	sub	sp, #116	@ 0x74
 8003df0:	da08      	bge.n	8003e04 <sniprintf+0x20>
 8003df2:	238b      	movs	r3, #139	@ 0x8b
 8003df4:	602b      	str	r3, [r5, #0]
 8003df6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfa:	b01d      	add	sp, #116	@ 0x74
 8003dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e00:	b002      	add	sp, #8
 8003e02:	4770      	bx	lr
 8003e04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003e08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003e0c:	bf14      	ite	ne
 8003e0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003e12:	4623      	moveq	r3, r4
 8003e14:	9304      	str	r3, [sp, #16]
 8003e16:	9307      	str	r3, [sp, #28]
 8003e18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e1c:	9002      	str	r0, [sp, #8]
 8003e1e:	9006      	str	r0, [sp, #24]
 8003e20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003e24:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003e26:	ab21      	add	r3, sp, #132	@ 0x84
 8003e28:	a902      	add	r1, sp, #8
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	f000 f995 	bl	800415c <_svfiprintf_r>
 8003e32:	1c43      	adds	r3, r0, #1
 8003e34:	bfbc      	itt	lt
 8003e36:	238b      	movlt	r3, #139	@ 0x8b
 8003e38:	602b      	strlt	r3, [r5, #0]
 8003e3a:	2c00      	cmp	r4, #0
 8003e3c:	d0dd      	beq.n	8003dfa <sniprintf+0x16>
 8003e3e:	9b02      	ldr	r3, [sp, #8]
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
 8003e44:	e7d9      	b.n	8003dfa <sniprintf+0x16>
 8003e46:	bf00      	nop
 8003e48:	2000000c 	.word	0x2000000c

08003e4c <memset>:
 8003e4c:	4402      	add	r2, r0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d100      	bne.n	8003e56 <memset+0xa>
 8003e54:	4770      	bx	lr
 8003e56:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5a:	e7f9      	b.n	8003e50 <memset+0x4>

08003e5c <__errno>:
 8003e5c:	4b01      	ldr	r3, [pc, #4]	@ (8003e64 <__errno+0x8>)
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	2000000c 	.word	0x2000000c

08003e68 <__libc_init_array>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	4d0d      	ldr	r5, [pc, #52]	@ (8003ea0 <__libc_init_array+0x38>)
 8003e6c:	4c0d      	ldr	r4, [pc, #52]	@ (8003ea4 <__libc_init_array+0x3c>)
 8003e6e:	1b64      	subs	r4, r4, r5
 8003e70:	10a4      	asrs	r4, r4, #2
 8003e72:	2600      	movs	r6, #0
 8003e74:	42a6      	cmp	r6, r4
 8003e76:	d109      	bne.n	8003e8c <__libc_init_array+0x24>
 8003e78:	4d0b      	ldr	r5, [pc, #44]	@ (8003ea8 <__libc_init_array+0x40>)
 8003e7a:	4c0c      	ldr	r4, [pc, #48]	@ (8003eac <__libc_init_array+0x44>)
 8003e7c:	f000 fc66 	bl	800474c <_init>
 8003e80:	1b64      	subs	r4, r4, r5
 8003e82:	10a4      	asrs	r4, r4, #2
 8003e84:	2600      	movs	r6, #0
 8003e86:	42a6      	cmp	r6, r4
 8003e88:	d105      	bne.n	8003e96 <__libc_init_array+0x2e>
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e90:	4798      	blx	r3
 8003e92:	3601      	adds	r6, #1
 8003e94:	e7ee      	b.n	8003e74 <__libc_init_array+0xc>
 8003e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9a:	4798      	blx	r3
 8003e9c:	3601      	adds	r6, #1
 8003e9e:	e7f2      	b.n	8003e86 <__libc_init_array+0x1e>
 8003ea0:	080047ec 	.word	0x080047ec
 8003ea4:	080047ec 	.word	0x080047ec
 8003ea8:	080047ec 	.word	0x080047ec
 8003eac:	080047f0 	.word	0x080047f0

08003eb0 <__retarget_lock_acquire_recursive>:
 8003eb0:	4770      	bx	lr

08003eb2 <__retarget_lock_release_recursive>:
 8003eb2:	4770      	bx	lr

08003eb4 <_free_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	2900      	cmp	r1, #0
 8003eba:	d041      	beq.n	8003f40 <_free_r+0x8c>
 8003ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec0:	1f0c      	subs	r4, r1, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bfb8      	it	lt
 8003ec6:	18e4      	addlt	r4, r4, r3
 8003ec8:	f000 f8e0 	bl	800408c <__malloc_lock>
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <_free_r+0x90>)
 8003ece:	6813      	ldr	r3, [r2, #0]
 8003ed0:	b933      	cbnz	r3, 8003ee0 <_free_r+0x2c>
 8003ed2:	6063      	str	r3, [r4, #4]
 8003ed4:	6014      	str	r4, [r2, #0]
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003edc:	f000 b8dc 	b.w	8004098 <__malloc_unlock>
 8003ee0:	42a3      	cmp	r3, r4
 8003ee2:	d908      	bls.n	8003ef6 <_free_r+0x42>
 8003ee4:	6820      	ldr	r0, [r4, #0]
 8003ee6:	1821      	adds	r1, r4, r0
 8003ee8:	428b      	cmp	r3, r1
 8003eea:	bf01      	itttt	eq
 8003eec:	6819      	ldreq	r1, [r3, #0]
 8003eee:	685b      	ldreq	r3, [r3, #4]
 8003ef0:	1809      	addeq	r1, r1, r0
 8003ef2:	6021      	streq	r1, [r4, #0]
 8003ef4:	e7ed      	b.n	8003ed2 <_free_r+0x1e>
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	b10b      	cbz	r3, 8003f00 <_free_r+0x4c>
 8003efc:	42a3      	cmp	r3, r4
 8003efe:	d9fa      	bls.n	8003ef6 <_free_r+0x42>
 8003f00:	6811      	ldr	r1, [r2, #0]
 8003f02:	1850      	adds	r0, r2, r1
 8003f04:	42a0      	cmp	r0, r4
 8003f06:	d10b      	bne.n	8003f20 <_free_r+0x6c>
 8003f08:	6820      	ldr	r0, [r4, #0]
 8003f0a:	4401      	add	r1, r0
 8003f0c:	1850      	adds	r0, r2, r1
 8003f0e:	4283      	cmp	r3, r0
 8003f10:	6011      	str	r1, [r2, #0]
 8003f12:	d1e0      	bne.n	8003ed6 <_free_r+0x22>
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	6053      	str	r3, [r2, #4]
 8003f1a:	4408      	add	r0, r1
 8003f1c:	6010      	str	r0, [r2, #0]
 8003f1e:	e7da      	b.n	8003ed6 <_free_r+0x22>
 8003f20:	d902      	bls.n	8003f28 <_free_r+0x74>
 8003f22:	230c      	movs	r3, #12
 8003f24:	602b      	str	r3, [r5, #0]
 8003f26:	e7d6      	b.n	8003ed6 <_free_r+0x22>
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	1821      	adds	r1, r4, r0
 8003f2c:	428b      	cmp	r3, r1
 8003f2e:	bf04      	itt	eq
 8003f30:	6819      	ldreq	r1, [r3, #0]
 8003f32:	685b      	ldreq	r3, [r3, #4]
 8003f34:	6063      	str	r3, [r4, #4]
 8003f36:	bf04      	itt	eq
 8003f38:	1809      	addeq	r1, r1, r0
 8003f3a:	6021      	streq	r1, [r4, #0]
 8003f3c:	6054      	str	r4, [r2, #4]
 8003f3e:	e7ca      	b.n	8003ed6 <_free_r+0x22>
 8003f40:	bd38      	pop	{r3, r4, r5, pc}
 8003f42:	bf00      	nop
 8003f44:	20000298 	.word	0x20000298

08003f48 <sbrk_aligned>:
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	4e0f      	ldr	r6, [pc, #60]	@ (8003f88 <sbrk_aligned+0x40>)
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	6831      	ldr	r1, [r6, #0]
 8003f50:	4605      	mov	r5, r0
 8003f52:	b911      	cbnz	r1, 8003f5a <sbrk_aligned+0x12>
 8003f54:	f000 fba6 	bl	80046a4 <_sbrk_r>
 8003f58:	6030      	str	r0, [r6, #0]
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	f000 fba1 	bl	80046a4 <_sbrk_r>
 8003f62:	1c43      	adds	r3, r0, #1
 8003f64:	d103      	bne.n	8003f6e <sbrk_aligned+0x26>
 8003f66:	f04f 34ff 	mov.w	r4, #4294967295
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
 8003f6e:	1cc4      	adds	r4, r0, #3
 8003f70:	f024 0403 	bic.w	r4, r4, #3
 8003f74:	42a0      	cmp	r0, r4
 8003f76:	d0f8      	beq.n	8003f6a <sbrk_aligned+0x22>
 8003f78:	1a21      	subs	r1, r4, r0
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f000 fb92 	bl	80046a4 <_sbrk_r>
 8003f80:	3001      	adds	r0, #1
 8003f82:	d1f2      	bne.n	8003f6a <sbrk_aligned+0x22>
 8003f84:	e7ef      	b.n	8003f66 <sbrk_aligned+0x1e>
 8003f86:	bf00      	nop
 8003f88:	20000294 	.word	0x20000294

08003f8c <_malloc_r>:
 8003f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f90:	1ccd      	adds	r5, r1, #3
 8003f92:	f025 0503 	bic.w	r5, r5, #3
 8003f96:	3508      	adds	r5, #8
 8003f98:	2d0c      	cmp	r5, #12
 8003f9a:	bf38      	it	cc
 8003f9c:	250c      	movcc	r5, #12
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	4606      	mov	r6, r0
 8003fa2:	db01      	blt.n	8003fa8 <_malloc_r+0x1c>
 8003fa4:	42a9      	cmp	r1, r5
 8003fa6:	d904      	bls.n	8003fb2 <_malloc_r+0x26>
 8003fa8:	230c      	movs	r3, #12
 8003faa:	6033      	str	r3, [r6, #0]
 8003fac:	2000      	movs	r0, #0
 8003fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004088 <_malloc_r+0xfc>
 8003fb6:	f000 f869 	bl	800408c <__malloc_lock>
 8003fba:	f8d8 3000 	ldr.w	r3, [r8]
 8003fbe:	461c      	mov	r4, r3
 8003fc0:	bb44      	cbnz	r4, 8004014 <_malloc_r+0x88>
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f7ff ffbf 	bl	8003f48 <sbrk_aligned>
 8003fca:	1c43      	adds	r3, r0, #1
 8003fcc:	4604      	mov	r4, r0
 8003fce:	d158      	bne.n	8004082 <_malloc_r+0xf6>
 8003fd0:	f8d8 4000 	ldr.w	r4, [r8]
 8003fd4:	4627      	mov	r7, r4
 8003fd6:	2f00      	cmp	r7, #0
 8003fd8:	d143      	bne.n	8004062 <_malloc_r+0xd6>
 8003fda:	2c00      	cmp	r4, #0
 8003fdc:	d04b      	beq.n	8004076 <_malloc_r+0xea>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	4639      	mov	r1, r7
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	eb04 0903 	add.w	r9, r4, r3
 8003fe8:	f000 fb5c 	bl	80046a4 <_sbrk_r>
 8003fec:	4581      	cmp	r9, r0
 8003fee:	d142      	bne.n	8004076 <_malloc_r+0xea>
 8003ff0:	6821      	ldr	r1, [r4, #0]
 8003ff2:	1a6d      	subs	r5, r5, r1
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f7ff ffa6 	bl	8003f48 <sbrk_aligned>
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d03a      	beq.n	8004076 <_malloc_r+0xea>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	442b      	add	r3, r5
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	f8d8 3000 	ldr.w	r3, [r8]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	bb62      	cbnz	r2, 8004068 <_malloc_r+0xdc>
 800400e:	f8c8 7000 	str.w	r7, [r8]
 8004012:	e00f      	b.n	8004034 <_malloc_r+0xa8>
 8004014:	6822      	ldr	r2, [r4, #0]
 8004016:	1b52      	subs	r2, r2, r5
 8004018:	d420      	bmi.n	800405c <_malloc_r+0xd0>
 800401a:	2a0b      	cmp	r2, #11
 800401c:	d917      	bls.n	800404e <_malloc_r+0xc2>
 800401e:	1961      	adds	r1, r4, r5
 8004020:	42a3      	cmp	r3, r4
 8004022:	6025      	str	r5, [r4, #0]
 8004024:	bf18      	it	ne
 8004026:	6059      	strne	r1, [r3, #4]
 8004028:	6863      	ldr	r3, [r4, #4]
 800402a:	bf08      	it	eq
 800402c:	f8c8 1000 	streq.w	r1, [r8]
 8004030:	5162      	str	r2, [r4, r5]
 8004032:	604b      	str	r3, [r1, #4]
 8004034:	4630      	mov	r0, r6
 8004036:	f000 f82f 	bl	8004098 <__malloc_unlock>
 800403a:	f104 000b 	add.w	r0, r4, #11
 800403e:	1d23      	adds	r3, r4, #4
 8004040:	f020 0007 	bic.w	r0, r0, #7
 8004044:	1ac2      	subs	r2, r0, r3
 8004046:	bf1c      	itt	ne
 8004048:	1a1b      	subne	r3, r3, r0
 800404a:	50a3      	strne	r3, [r4, r2]
 800404c:	e7af      	b.n	8003fae <_malloc_r+0x22>
 800404e:	6862      	ldr	r2, [r4, #4]
 8004050:	42a3      	cmp	r3, r4
 8004052:	bf0c      	ite	eq
 8004054:	f8c8 2000 	streq.w	r2, [r8]
 8004058:	605a      	strne	r2, [r3, #4]
 800405a:	e7eb      	b.n	8004034 <_malloc_r+0xa8>
 800405c:	4623      	mov	r3, r4
 800405e:	6864      	ldr	r4, [r4, #4]
 8004060:	e7ae      	b.n	8003fc0 <_malloc_r+0x34>
 8004062:	463c      	mov	r4, r7
 8004064:	687f      	ldr	r7, [r7, #4]
 8004066:	e7b6      	b.n	8003fd6 <_malloc_r+0x4a>
 8004068:	461a      	mov	r2, r3
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	42a3      	cmp	r3, r4
 800406e:	d1fb      	bne.n	8004068 <_malloc_r+0xdc>
 8004070:	2300      	movs	r3, #0
 8004072:	6053      	str	r3, [r2, #4]
 8004074:	e7de      	b.n	8004034 <_malloc_r+0xa8>
 8004076:	230c      	movs	r3, #12
 8004078:	6033      	str	r3, [r6, #0]
 800407a:	4630      	mov	r0, r6
 800407c:	f000 f80c 	bl	8004098 <__malloc_unlock>
 8004080:	e794      	b.n	8003fac <_malloc_r+0x20>
 8004082:	6005      	str	r5, [r0, #0]
 8004084:	e7d6      	b.n	8004034 <_malloc_r+0xa8>
 8004086:	bf00      	nop
 8004088:	20000298 	.word	0x20000298

0800408c <__malloc_lock>:
 800408c:	4801      	ldr	r0, [pc, #4]	@ (8004094 <__malloc_lock+0x8>)
 800408e:	f7ff bf0f 	b.w	8003eb0 <__retarget_lock_acquire_recursive>
 8004092:	bf00      	nop
 8004094:	20000290 	.word	0x20000290

08004098 <__malloc_unlock>:
 8004098:	4801      	ldr	r0, [pc, #4]	@ (80040a0 <__malloc_unlock+0x8>)
 800409a:	f7ff bf0a 	b.w	8003eb2 <__retarget_lock_release_recursive>
 800409e:	bf00      	nop
 80040a0:	20000290 	.word	0x20000290

080040a4 <__ssputs_r>:
 80040a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a8:	688e      	ldr	r6, [r1, #8]
 80040aa:	461f      	mov	r7, r3
 80040ac:	42be      	cmp	r6, r7
 80040ae:	680b      	ldr	r3, [r1, #0]
 80040b0:	4682      	mov	sl, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	4690      	mov	r8, r2
 80040b6:	d82d      	bhi.n	8004114 <__ssputs_r+0x70>
 80040b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040c0:	d026      	beq.n	8004110 <__ssputs_r+0x6c>
 80040c2:	6965      	ldr	r5, [r4, #20]
 80040c4:	6909      	ldr	r1, [r1, #16]
 80040c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040ca:	eba3 0901 	sub.w	r9, r3, r1
 80040ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040d2:	1c7b      	adds	r3, r7, #1
 80040d4:	444b      	add	r3, r9
 80040d6:	106d      	asrs	r5, r5, #1
 80040d8:	429d      	cmp	r5, r3
 80040da:	bf38      	it	cc
 80040dc:	461d      	movcc	r5, r3
 80040de:	0553      	lsls	r3, r2, #21
 80040e0:	d527      	bpl.n	8004132 <__ssputs_r+0x8e>
 80040e2:	4629      	mov	r1, r5
 80040e4:	f7ff ff52 	bl	8003f8c <_malloc_r>
 80040e8:	4606      	mov	r6, r0
 80040ea:	b360      	cbz	r0, 8004146 <__ssputs_r+0xa2>
 80040ec:	6921      	ldr	r1, [r4, #16]
 80040ee:	464a      	mov	r2, r9
 80040f0:	f000 fae8 	bl	80046c4 <memcpy>
 80040f4:	89a3      	ldrh	r3, [r4, #12]
 80040f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	6126      	str	r6, [r4, #16]
 8004102:	6165      	str	r5, [r4, #20]
 8004104:	444e      	add	r6, r9
 8004106:	eba5 0509 	sub.w	r5, r5, r9
 800410a:	6026      	str	r6, [r4, #0]
 800410c:	60a5      	str	r5, [r4, #8]
 800410e:	463e      	mov	r6, r7
 8004110:	42be      	cmp	r6, r7
 8004112:	d900      	bls.n	8004116 <__ssputs_r+0x72>
 8004114:	463e      	mov	r6, r7
 8004116:	6820      	ldr	r0, [r4, #0]
 8004118:	4632      	mov	r2, r6
 800411a:	4641      	mov	r1, r8
 800411c:	f000 faa8 	bl	8004670 <memmove>
 8004120:	68a3      	ldr	r3, [r4, #8]
 8004122:	1b9b      	subs	r3, r3, r6
 8004124:	60a3      	str	r3, [r4, #8]
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	4433      	add	r3, r6
 800412a:	6023      	str	r3, [r4, #0]
 800412c:	2000      	movs	r0, #0
 800412e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004132:	462a      	mov	r2, r5
 8004134:	f000 fad4 	bl	80046e0 <_realloc_r>
 8004138:	4606      	mov	r6, r0
 800413a:	2800      	cmp	r0, #0
 800413c:	d1e0      	bne.n	8004100 <__ssputs_r+0x5c>
 800413e:	6921      	ldr	r1, [r4, #16]
 8004140:	4650      	mov	r0, sl
 8004142:	f7ff feb7 	bl	8003eb4 <_free_r>
 8004146:	230c      	movs	r3, #12
 8004148:	f8ca 3000 	str.w	r3, [sl]
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004152:	81a3      	strh	r3, [r4, #12]
 8004154:	f04f 30ff 	mov.w	r0, #4294967295
 8004158:	e7e9      	b.n	800412e <__ssputs_r+0x8a>
	...

0800415c <_svfiprintf_r>:
 800415c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004160:	4698      	mov	r8, r3
 8004162:	898b      	ldrh	r3, [r1, #12]
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	b09d      	sub	sp, #116	@ 0x74
 8004168:	4607      	mov	r7, r0
 800416a:	460d      	mov	r5, r1
 800416c:	4614      	mov	r4, r2
 800416e:	d510      	bpl.n	8004192 <_svfiprintf_r+0x36>
 8004170:	690b      	ldr	r3, [r1, #16]
 8004172:	b973      	cbnz	r3, 8004192 <_svfiprintf_r+0x36>
 8004174:	2140      	movs	r1, #64	@ 0x40
 8004176:	f7ff ff09 	bl	8003f8c <_malloc_r>
 800417a:	6028      	str	r0, [r5, #0]
 800417c:	6128      	str	r0, [r5, #16]
 800417e:	b930      	cbnz	r0, 800418e <_svfiprintf_r+0x32>
 8004180:	230c      	movs	r3, #12
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	b01d      	add	sp, #116	@ 0x74
 800418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418e:	2340      	movs	r3, #64	@ 0x40
 8004190:	616b      	str	r3, [r5, #20]
 8004192:	2300      	movs	r3, #0
 8004194:	9309      	str	r3, [sp, #36]	@ 0x24
 8004196:	2320      	movs	r3, #32
 8004198:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800419c:	f8cd 800c 	str.w	r8, [sp, #12]
 80041a0:	2330      	movs	r3, #48	@ 0x30
 80041a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004340 <_svfiprintf_r+0x1e4>
 80041a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041aa:	f04f 0901 	mov.w	r9, #1
 80041ae:	4623      	mov	r3, r4
 80041b0:	469a      	mov	sl, r3
 80041b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041b6:	b10a      	cbz	r2, 80041bc <_svfiprintf_r+0x60>
 80041b8:	2a25      	cmp	r2, #37	@ 0x25
 80041ba:	d1f9      	bne.n	80041b0 <_svfiprintf_r+0x54>
 80041bc:	ebba 0b04 	subs.w	fp, sl, r4
 80041c0:	d00b      	beq.n	80041da <_svfiprintf_r+0x7e>
 80041c2:	465b      	mov	r3, fp
 80041c4:	4622      	mov	r2, r4
 80041c6:	4629      	mov	r1, r5
 80041c8:	4638      	mov	r0, r7
 80041ca:	f7ff ff6b 	bl	80040a4 <__ssputs_r>
 80041ce:	3001      	adds	r0, #1
 80041d0:	f000 80a7 	beq.w	8004322 <_svfiprintf_r+0x1c6>
 80041d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041d6:	445a      	add	r2, fp
 80041d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80041da:	f89a 3000 	ldrb.w	r3, [sl]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 809f 	beq.w	8004322 <_svfiprintf_r+0x1c6>
 80041e4:	2300      	movs	r3, #0
 80041e6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ee:	f10a 0a01 	add.w	sl, sl, #1
 80041f2:	9304      	str	r3, [sp, #16]
 80041f4:	9307      	str	r3, [sp, #28]
 80041f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80041fc:	4654      	mov	r4, sl
 80041fe:	2205      	movs	r2, #5
 8004200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004204:	484e      	ldr	r0, [pc, #312]	@ (8004340 <_svfiprintf_r+0x1e4>)
 8004206:	f7fb ffeb 	bl	80001e0 <memchr>
 800420a:	9a04      	ldr	r2, [sp, #16]
 800420c:	b9d8      	cbnz	r0, 8004246 <_svfiprintf_r+0xea>
 800420e:	06d0      	lsls	r0, r2, #27
 8004210:	bf44      	itt	mi
 8004212:	2320      	movmi	r3, #32
 8004214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004218:	0711      	lsls	r1, r2, #28
 800421a:	bf44      	itt	mi
 800421c:	232b      	movmi	r3, #43	@ 0x2b
 800421e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004222:	f89a 3000 	ldrb.w	r3, [sl]
 8004226:	2b2a      	cmp	r3, #42	@ 0x2a
 8004228:	d015      	beq.n	8004256 <_svfiprintf_r+0xfa>
 800422a:	9a07      	ldr	r2, [sp, #28]
 800422c:	4654      	mov	r4, sl
 800422e:	2000      	movs	r0, #0
 8004230:	f04f 0c0a 	mov.w	ip, #10
 8004234:	4621      	mov	r1, r4
 8004236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800423a:	3b30      	subs	r3, #48	@ 0x30
 800423c:	2b09      	cmp	r3, #9
 800423e:	d94b      	bls.n	80042d8 <_svfiprintf_r+0x17c>
 8004240:	b1b0      	cbz	r0, 8004270 <_svfiprintf_r+0x114>
 8004242:	9207      	str	r2, [sp, #28]
 8004244:	e014      	b.n	8004270 <_svfiprintf_r+0x114>
 8004246:	eba0 0308 	sub.w	r3, r0, r8
 800424a:	fa09 f303 	lsl.w	r3, r9, r3
 800424e:	4313      	orrs	r3, r2
 8004250:	9304      	str	r3, [sp, #16]
 8004252:	46a2      	mov	sl, r4
 8004254:	e7d2      	b.n	80041fc <_svfiprintf_r+0xa0>
 8004256:	9b03      	ldr	r3, [sp, #12]
 8004258:	1d19      	adds	r1, r3, #4
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	9103      	str	r1, [sp, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	bfbb      	ittet	lt
 8004262:	425b      	neglt	r3, r3
 8004264:	f042 0202 	orrlt.w	r2, r2, #2
 8004268:	9307      	strge	r3, [sp, #28]
 800426a:	9307      	strlt	r3, [sp, #28]
 800426c:	bfb8      	it	lt
 800426e:	9204      	strlt	r2, [sp, #16]
 8004270:	7823      	ldrb	r3, [r4, #0]
 8004272:	2b2e      	cmp	r3, #46	@ 0x2e
 8004274:	d10a      	bne.n	800428c <_svfiprintf_r+0x130>
 8004276:	7863      	ldrb	r3, [r4, #1]
 8004278:	2b2a      	cmp	r3, #42	@ 0x2a
 800427a:	d132      	bne.n	80042e2 <_svfiprintf_r+0x186>
 800427c:	9b03      	ldr	r3, [sp, #12]
 800427e:	1d1a      	adds	r2, r3, #4
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	9203      	str	r2, [sp, #12]
 8004284:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004288:	3402      	adds	r4, #2
 800428a:	9305      	str	r3, [sp, #20]
 800428c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004350 <_svfiprintf_r+0x1f4>
 8004290:	7821      	ldrb	r1, [r4, #0]
 8004292:	2203      	movs	r2, #3
 8004294:	4650      	mov	r0, sl
 8004296:	f7fb ffa3 	bl	80001e0 <memchr>
 800429a:	b138      	cbz	r0, 80042ac <_svfiprintf_r+0x150>
 800429c:	9b04      	ldr	r3, [sp, #16]
 800429e:	eba0 000a 	sub.w	r0, r0, sl
 80042a2:	2240      	movs	r2, #64	@ 0x40
 80042a4:	4082      	lsls	r2, r0
 80042a6:	4313      	orrs	r3, r2
 80042a8:	3401      	adds	r4, #1
 80042aa:	9304      	str	r3, [sp, #16]
 80042ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b0:	4824      	ldr	r0, [pc, #144]	@ (8004344 <_svfiprintf_r+0x1e8>)
 80042b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042b6:	2206      	movs	r2, #6
 80042b8:	f7fb ff92 	bl	80001e0 <memchr>
 80042bc:	2800      	cmp	r0, #0
 80042be:	d036      	beq.n	800432e <_svfiprintf_r+0x1d2>
 80042c0:	4b21      	ldr	r3, [pc, #132]	@ (8004348 <_svfiprintf_r+0x1ec>)
 80042c2:	bb1b      	cbnz	r3, 800430c <_svfiprintf_r+0x1b0>
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	3307      	adds	r3, #7
 80042c8:	f023 0307 	bic.w	r3, r3, #7
 80042cc:	3308      	adds	r3, #8
 80042ce:	9303      	str	r3, [sp, #12]
 80042d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042d2:	4433      	add	r3, r6
 80042d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042d6:	e76a      	b.n	80041ae <_svfiprintf_r+0x52>
 80042d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80042dc:	460c      	mov	r4, r1
 80042de:	2001      	movs	r0, #1
 80042e0:	e7a8      	b.n	8004234 <_svfiprintf_r+0xd8>
 80042e2:	2300      	movs	r3, #0
 80042e4:	3401      	adds	r4, #1
 80042e6:	9305      	str	r3, [sp, #20]
 80042e8:	4619      	mov	r1, r3
 80042ea:	f04f 0c0a 	mov.w	ip, #10
 80042ee:	4620      	mov	r0, r4
 80042f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042f4:	3a30      	subs	r2, #48	@ 0x30
 80042f6:	2a09      	cmp	r2, #9
 80042f8:	d903      	bls.n	8004302 <_svfiprintf_r+0x1a6>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0c6      	beq.n	800428c <_svfiprintf_r+0x130>
 80042fe:	9105      	str	r1, [sp, #20]
 8004300:	e7c4      	b.n	800428c <_svfiprintf_r+0x130>
 8004302:	fb0c 2101 	mla	r1, ip, r1, r2
 8004306:	4604      	mov	r4, r0
 8004308:	2301      	movs	r3, #1
 800430a:	e7f0      	b.n	80042ee <_svfiprintf_r+0x192>
 800430c:	ab03      	add	r3, sp, #12
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	462a      	mov	r2, r5
 8004312:	4b0e      	ldr	r3, [pc, #56]	@ (800434c <_svfiprintf_r+0x1f0>)
 8004314:	a904      	add	r1, sp, #16
 8004316:	4638      	mov	r0, r7
 8004318:	f3af 8000 	nop.w
 800431c:	1c42      	adds	r2, r0, #1
 800431e:	4606      	mov	r6, r0
 8004320:	d1d6      	bne.n	80042d0 <_svfiprintf_r+0x174>
 8004322:	89ab      	ldrh	r3, [r5, #12]
 8004324:	065b      	lsls	r3, r3, #25
 8004326:	f53f af2d 	bmi.w	8004184 <_svfiprintf_r+0x28>
 800432a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800432c:	e72c      	b.n	8004188 <_svfiprintf_r+0x2c>
 800432e:	ab03      	add	r3, sp, #12
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	462a      	mov	r2, r5
 8004334:	4b05      	ldr	r3, [pc, #20]	@ (800434c <_svfiprintf_r+0x1f0>)
 8004336:	a904      	add	r1, sp, #16
 8004338:	4638      	mov	r0, r7
 800433a:	f000 f879 	bl	8004430 <_printf_i>
 800433e:	e7ed      	b.n	800431c <_svfiprintf_r+0x1c0>
 8004340:	080047b0 	.word	0x080047b0
 8004344:	080047ba 	.word	0x080047ba
 8004348:	00000000 	.word	0x00000000
 800434c:	080040a5 	.word	0x080040a5
 8004350:	080047b6 	.word	0x080047b6

08004354 <_printf_common>:
 8004354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004358:	4616      	mov	r6, r2
 800435a:	4698      	mov	r8, r3
 800435c:	688a      	ldr	r2, [r1, #8]
 800435e:	690b      	ldr	r3, [r1, #16]
 8004360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004364:	4293      	cmp	r3, r2
 8004366:	bfb8      	it	lt
 8004368:	4613      	movlt	r3, r2
 800436a:	6033      	str	r3, [r6, #0]
 800436c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004370:	4607      	mov	r7, r0
 8004372:	460c      	mov	r4, r1
 8004374:	b10a      	cbz	r2, 800437a <_printf_common+0x26>
 8004376:	3301      	adds	r3, #1
 8004378:	6033      	str	r3, [r6, #0]
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	0699      	lsls	r1, r3, #26
 800437e:	bf42      	ittt	mi
 8004380:	6833      	ldrmi	r3, [r6, #0]
 8004382:	3302      	addmi	r3, #2
 8004384:	6033      	strmi	r3, [r6, #0]
 8004386:	6825      	ldr	r5, [r4, #0]
 8004388:	f015 0506 	ands.w	r5, r5, #6
 800438c:	d106      	bne.n	800439c <_printf_common+0x48>
 800438e:	f104 0a19 	add.w	sl, r4, #25
 8004392:	68e3      	ldr	r3, [r4, #12]
 8004394:	6832      	ldr	r2, [r6, #0]
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	42ab      	cmp	r3, r5
 800439a:	dc26      	bgt.n	80043ea <_printf_common+0x96>
 800439c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	3b00      	subs	r3, #0
 80043a4:	bf18      	it	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	0692      	lsls	r2, r2, #26
 80043aa:	d42b      	bmi.n	8004404 <_printf_common+0xb0>
 80043ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043b0:	4641      	mov	r1, r8
 80043b2:	4638      	mov	r0, r7
 80043b4:	47c8      	blx	r9
 80043b6:	3001      	adds	r0, #1
 80043b8:	d01e      	beq.n	80043f8 <_printf_common+0xa4>
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	6922      	ldr	r2, [r4, #16]
 80043be:	f003 0306 	and.w	r3, r3, #6
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	bf02      	ittt	eq
 80043c6:	68e5      	ldreq	r5, [r4, #12]
 80043c8:	6833      	ldreq	r3, [r6, #0]
 80043ca:	1aed      	subeq	r5, r5, r3
 80043cc:	68a3      	ldr	r3, [r4, #8]
 80043ce:	bf0c      	ite	eq
 80043d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d4:	2500      	movne	r5, #0
 80043d6:	4293      	cmp	r3, r2
 80043d8:	bfc4      	itt	gt
 80043da:	1a9b      	subgt	r3, r3, r2
 80043dc:	18ed      	addgt	r5, r5, r3
 80043de:	2600      	movs	r6, #0
 80043e0:	341a      	adds	r4, #26
 80043e2:	42b5      	cmp	r5, r6
 80043e4:	d11a      	bne.n	800441c <_printf_common+0xc8>
 80043e6:	2000      	movs	r0, #0
 80043e8:	e008      	b.n	80043fc <_printf_common+0xa8>
 80043ea:	2301      	movs	r3, #1
 80043ec:	4652      	mov	r2, sl
 80043ee:	4641      	mov	r1, r8
 80043f0:	4638      	mov	r0, r7
 80043f2:	47c8      	blx	r9
 80043f4:	3001      	adds	r0, #1
 80043f6:	d103      	bne.n	8004400 <_printf_common+0xac>
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004400:	3501      	adds	r5, #1
 8004402:	e7c6      	b.n	8004392 <_printf_common+0x3e>
 8004404:	18e1      	adds	r1, r4, r3
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	2030      	movs	r0, #48	@ 0x30
 800440a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800440e:	4422      	add	r2, r4
 8004410:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004414:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004418:	3302      	adds	r3, #2
 800441a:	e7c7      	b.n	80043ac <_printf_common+0x58>
 800441c:	2301      	movs	r3, #1
 800441e:	4622      	mov	r2, r4
 8004420:	4641      	mov	r1, r8
 8004422:	4638      	mov	r0, r7
 8004424:	47c8      	blx	r9
 8004426:	3001      	adds	r0, #1
 8004428:	d0e6      	beq.n	80043f8 <_printf_common+0xa4>
 800442a:	3601      	adds	r6, #1
 800442c:	e7d9      	b.n	80043e2 <_printf_common+0x8e>
	...

08004430 <_printf_i>:
 8004430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004434:	7e0f      	ldrb	r7, [r1, #24]
 8004436:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004438:	2f78      	cmp	r7, #120	@ 0x78
 800443a:	4691      	mov	r9, r2
 800443c:	4680      	mov	r8, r0
 800443e:	460c      	mov	r4, r1
 8004440:	469a      	mov	sl, r3
 8004442:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004446:	d807      	bhi.n	8004458 <_printf_i+0x28>
 8004448:	2f62      	cmp	r7, #98	@ 0x62
 800444a:	d80a      	bhi.n	8004462 <_printf_i+0x32>
 800444c:	2f00      	cmp	r7, #0
 800444e:	f000 80d2 	beq.w	80045f6 <_printf_i+0x1c6>
 8004452:	2f58      	cmp	r7, #88	@ 0x58
 8004454:	f000 80b9 	beq.w	80045ca <_printf_i+0x19a>
 8004458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800445c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004460:	e03a      	b.n	80044d8 <_printf_i+0xa8>
 8004462:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004466:	2b15      	cmp	r3, #21
 8004468:	d8f6      	bhi.n	8004458 <_printf_i+0x28>
 800446a:	a101      	add	r1, pc, #4	@ (adr r1, 8004470 <_printf_i+0x40>)
 800446c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004470:	080044c9 	.word	0x080044c9
 8004474:	080044dd 	.word	0x080044dd
 8004478:	08004459 	.word	0x08004459
 800447c:	08004459 	.word	0x08004459
 8004480:	08004459 	.word	0x08004459
 8004484:	08004459 	.word	0x08004459
 8004488:	080044dd 	.word	0x080044dd
 800448c:	08004459 	.word	0x08004459
 8004490:	08004459 	.word	0x08004459
 8004494:	08004459 	.word	0x08004459
 8004498:	08004459 	.word	0x08004459
 800449c:	080045dd 	.word	0x080045dd
 80044a0:	08004507 	.word	0x08004507
 80044a4:	08004597 	.word	0x08004597
 80044a8:	08004459 	.word	0x08004459
 80044ac:	08004459 	.word	0x08004459
 80044b0:	080045ff 	.word	0x080045ff
 80044b4:	08004459 	.word	0x08004459
 80044b8:	08004507 	.word	0x08004507
 80044bc:	08004459 	.word	0x08004459
 80044c0:	08004459 	.word	0x08004459
 80044c4:	0800459f 	.word	0x0800459f
 80044c8:	6833      	ldr	r3, [r6, #0]
 80044ca:	1d1a      	adds	r2, r3, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6032      	str	r2, [r6, #0]
 80044d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044d8:	2301      	movs	r3, #1
 80044da:	e09d      	b.n	8004618 <_printf_i+0x1e8>
 80044dc:	6833      	ldr	r3, [r6, #0]
 80044de:	6820      	ldr	r0, [r4, #0]
 80044e0:	1d19      	adds	r1, r3, #4
 80044e2:	6031      	str	r1, [r6, #0]
 80044e4:	0606      	lsls	r6, r0, #24
 80044e6:	d501      	bpl.n	80044ec <_printf_i+0xbc>
 80044e8:	681d      	ldr	r5, [r3, #0]
 80044ea:	e003      	b.n	80044f4 <_printf_i+0xc4>
 80044ec:	0645      	lsls	r5, r0, #25
 80044ee:	d5fb      	bpl.n	80044e8 <_printf_i+0xb8>
 80044f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044f4:	2d00      	cmp	r5, #0
 80044f6:	da03      	bge.n	8004500 <_printf_i+0xd0>
 80044f8:	232d      	movs	r3, #45	@ 0x2d
 80044fa:	426d      	negs	r5, r5
 80044fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004500:	4859      	ldr	r0, [pc, #356]	@ (8004668 <_printf_i+0x238>)
 8004502:	230a      	movs	r3, #10
 8004504:	e011      	b.n	800452a <_printf_i+0xfa>
 8004506:	6821      	ldr	r1, [r4, #0]
 8004508:	6833      	ldr	r3, [r6, #0]
 800450a:	0608      	lsls	r0, r1, #24
 800450c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004510:	d402      	bmi.n	8004518 <_printf_i+0xe8>
 8004512:	0649      	lsls	r1, r1, #25
 8004514:	bf48      	it	mi
 8004516:	b2ad      	uxthmi	r5, r5
 8004518:	2f6f      	cmp	r7, #111	@ 0x6f
 800451a:	4853      	ldr	r0, [pc, #332]	@ (8004668 <_printf_i+0x238>)
 800451c:	6033      	str	r3, [r6, #0]
 800451e:	bf14      	ite	ne
 8004520:	230a      	movne	r3, #10
 8004522:	2308      	moveq	r3, #8
 8004524:	2100      	movs	r1, #0
 8004526:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800452a:	6866      	ldr	r6, [r4, #4]
 800452c:	60a6      	str	r6, [r4, #8]
 800452e:	2e00      	cmp	r6, #0
 8004530:	bfa2      	ittt	ge
 8004532:	6821      	ldrge	r1, [r4, #0]
 8004534:	f021 0104 	bicge.w	r1, r1, #4
 8004538:	6021      	strge	r1, [r4, #0]
 800453a:	b90d      	cbnz	r5, 8004540 <_printf_i+0x110>
 800453c:	2e00      	cmp	r6, #0
 800453e:	d04b      	beq.n	80045d8 <_printf_i+0x1a8>
 8004540:	4616      	mov	r6, r2
 8004542:	fbb5 f1f3 	udiv	r1, r5, r3
 8004546:	fb03 5711 	mls	r7, r3, r1, r5
 800454a:	5dc7      	ldrb	r7, [r0, r7]
 800454c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004550:	462f      	mov	r7, r5
 8004552:	42bb      	cmp	r3, r7
 8004554:	460d      	mov	r5, r1
 8004556:	d9f4      	bls.n	8004542 <_printf_i+0x112>
 8004558:	2b08      	cmp	r3, #8
 800455a:	d10b      	bne.n	8004574 <_printf_i+0x144>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	07df      	lsls	r7, r3, #31
 8004560:	d508      	bpl.n	8004574 <_printf_i+0x144>
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	6861      	ldr	r1, [r4, #4]
 8004566:	4299      	cmp	r1, r3
 8004568:	bfde      	ittt	le
 800456a:	2330      	movle	r3, #48	@ 0x30
 800456c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004570:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004574:	1b92      	subs	r2, r2, r6
 8004576:	6122      	str	r2, [r4, #16]
 8004578:	f8cd a000 	str.w	sl, [sp]
 800457c:	464b      	mov	r3, r9
 800457e:	aa03      	add	r2, sp, #12
 8004580:	4621      	mov	r1, r4
 8004582:	4640      	mov	r0, r8
 8004584:	f7ff fee6 	bl	8004354 <_printf_common>
 8004588:	3001      	adds	r0, #1
 800458a:	d14a      	bne.n	8004622 <_printf_i+0x1f2>
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	b004      	add	sp, #16
 8004592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	f043 0320 	orr.w	r3, r3, #32
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	4833      	ldr	r0, [pc, #204]	@ (800466c <_printf_i+0x23c>)
 80045a0:	2778      	movs	r7, #120	@ 0x78
 80045a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	6831      	ldr	r1, [r6, #0]
 80045aa:	061f      	lsls	r7, r3, #24
 80045ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80045b0:	d402      	bmi.n	80045b8 <_printf_i+0x188>
 80045b2:	065f      	lsls	r7, r3, #25
 80045b4:	bf48      	it	mi
 80045b6:	b2ad      	uxthmi	r5, r5
 80045b8:	6031      	str	r1, [r6, #0]
 80045ba:	07d9      	lsls	r1, r3, #31
 80045bc:	bf44      	itt	mi
 80045be:	f043 0320 	orrmi.w	r3, r3, #32
 80045c2:	6023      	strmi	r3, [r4, #0]
 80045c4:	b11d      	cbz	r5, 80045ce <_printf_i+0x19e>
 80045c6:	2310      	movs	r3, #16
 80045c8:	e7ac      	b.n	8004524 <_printf_i+0xf4>
 80045ca:	4827      	ldr	r0, [pc, #156]	@ (8004668 <_printf_i+0x238>)
 80045cc:	e7e9      	b.n	80045a2 <_printf_i+0x172>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	f023 0320 	bic.w	r3, r3, #32
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	e7f6      	b.n	80045c6 <_printf_i+0x196>
 80045d8:	4616      	mov	r6, r2
 80045da:	e7bd      	b.n	8004558 <_printf_i+0x128>
 80045dc:	6833      	ldr	r3, [r6, #0]
 80045de:	6825      	ldr	r5, [r4, #0]
 80045e0:	6961      	ldr	r1, [r4, #20]
 80045e2:	1d18      	adds	r0, r3, #4
 80045e4:	6030      	str	r0, [r6, #0]
 80045e6:	062e      	lsls	r6, r5, #24
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	d501      	bpl.n	80045f0 <_printf_i+0x1c0>
 80045ec:	6019      	str	r1, [r3, #0]
 80045ee:	e002      	b.n	80045f6 <_printf_i+0x1c6>
 80045f0:	0668      	lsls	r0, r5, #25
 80045f2:	d5fb      	bpl.n	80045ec <_printf_i+0x1bc>
 80045f4:	8019      	strh	r1, [r3, #0]
 80045f6:	2300      	movs	r3, #0
 80045f8:	6123      	str	r3, [r4, #16]
 80045fa:	4616      	mov	r6, r2
 80045fc:	e7bc      	b.n	8004578 <_printf_i+0x148>
 80045fe:	6833      	ldr	r3, [r6, #0]
 8004600:	1d1a      	adds	r2, r3, #4
 8004602:	6032      	str	r2, [r6, #0]
 8004604:	681e      	ldr	r6, [r3, #0]
 8004606:	6862      	ldr	r2, [r4, #4]
 8004608:	2100      	movs	r1, #0
 800460a:	4630      	mov	r0, r6
 800460c:	f7fb fde8 	bl	80001e0 <memchr>
 8004610:	b108      	cbz	r0, 8004616 <_printf_i+0x1e6>
 8004612:	1b80      	subs	r0, r0, r6
 8004614:	6060      	str	r0, [r4, #4]
 8004616:	6863      	ldr	r3, [r4, #4]
 8004618:	6123      	str	r3, [r4, #16]
 800461a:	2300      	movs	r3, #0
 800461c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004620:	e7aa      	b.n	8004578 <_printf_i+0x148>
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	4632      	mov	r2, r6
 8004626:	4649      	mov	r1, r9
 8004628:	4640      	mov	r0, r8
 800462a:	47d0      	blx	sl
 800462c:	3001      	adds	r0, #1
 800462e:	d0ad      	beq.n	800458c <_printf_i+0x15c>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	079b      	lsls	r3, r3, #30
 8004634:	d413      	bmi.n	800465e <_printf_i+0x22e>
 8004636:	68e0      	ldr	r0, [r4, #12]
 8004638:	9b03      	ldr	r3, [sp, #12]
 800463a:	4298      	cmp	r0, r3
 800463c:	bfb8      	it	lt
 800463e:	4618      	movlt	r0, r3
 8004640:	e7a6      	b.n	8004590 <_printf_i+0x160>
 8004642:	2301      	movs	r3, #1
 8004644:	4632      	mov	r2, r6
 8004646:	4649      	mov	r1, r9
 8004648:	4640      	mov	r0, r8
 800464a:	47d0      	blx	sl
 800464c:	3001      	adds	r0, #1
 800464e:	d09d      	beq.n	800458c <_printf_i+0x15c>
 8004650:	3501      	adds	r5, #1
 8004652:	68e3      	ldr	r3, [r4, #12]
 8004654:	9903      	ldr	r1, [sp, #12]
 8004656:	1a5b      	subs	r3, r3, r1
 8004658:	42ab      	cmp	r3, r5
 800465a:	dcf2      	bgt.n	8004642 <_printf_i+0x212>
 800465c:	e7eb      	b.n	8004636 <_printf_i+0x206>
 800465e:	2500      	movs	r5, #0
 8004660:	f104 0619 	add.w	r6, r4, #25
 8004664:	e7f5      	b.n	8004652 <_printf_i+0x222>
 8004666:	bf00      	nop
 8004668:	080047c1 	.word	0x080047c1
 800466c:	080047d2 	.word	0x080047d2

08004670 <memmove>:
 8004670:	4288      	cmp	r0, r1
 8004672:	b510      	push	{r4, lr}
 8004674:	eb01 0402 	add.w	r4, r1, r2
 8004678:	d902      	bls.n	8004680 <memmove+0x10>
 800467a:	4284      	cmp	r4, r0
 800467c:	4623      	mov	r3, r4
 800467e:	d807      	bhi.n	8004690 <memmove+0x20>
 8004680:	1e43      	subs	r3, r0, #1
 8004682:	42a1      	cmp	r1, r4
 8004684:	d008      	beq.n	8004698 <memmove+0x28>
 8004686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800468a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800468e:	e7f8      	b.n	8004682 <memmove+0x12>
 8004690:	4402      	add	r2, r0
 8004692:	4601      	mov	r1, r0
 8004694:	428a      	cmp	r2, r1
 8004696:	d100      	bne.n	800469a <memmove+0x2a>
 8004698:	bd10      	pop	{r4, pc}
 800469a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800469e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046a2:	e7f7      	b.n	8004694 <memmove+0x24>

080046a4 <_sbrk_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4d06      	ldr	r5, [pc, #24]	@ (80046c0 <_sbrk_r+0x1c>)
 80046a8:	2300      	movs	r3, #0
 80046aa:	4604      	mov	r4, r0
 80046ac:	4608      	mov	r0, r1
 80046ae:	602b      	str	r3, [r5, #0]
 80046b0:	f7fc fd0c 	bl	80010cc <_sbrk>
 80046b4:	1c43      	adds	r3, r0, #1
 80046b6:	d102      	bne.n	80046be <_sbrk_r+0x1a>
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	b103      	cbz	r3, 80046be <_sbrk_r+0x1a>
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	bd38      	pop	{r3, r4, r5, pc}
 80046c0:	2000028c 	.word	0x2000028c

080046c4 <memcpy>:
 80046c4:	440a      	add	r2, r1
 80046c6:	4291      	cmp	r1, r2
 80046c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80046cc:	d100      	bne.n	80046d0 <memcpy+0xc>
 80046ce:	4770      	bx	lr
 80046d0:	b510      	push	{r4, lr}
 80046d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046da:	4291      	cmp	r1, r2
 80046dc:	d1f9      	bne.n	80046d2 <memcpy+0xe>
 80046de:	bd10      	pop	{r4, pc}

080046e0 <_realloc_r>:
 80046e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e4:	4680      	mov	r8, r0
 80046e6:	4615      	mov	r5, r2
 80046e8:	460c      	mov	r4, r1
 80046ea:	b921      	cbnz	r1, 80046f6 <_realloc_r+0x16>
 80046ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046f0:	4611      	mov	r1, r2
 80046f2:	f7ff bc4b 	b.w	8003f8c <_malloc_r>
 80046f6:	b92a      	cbnz	r2, 8004704 <_realloc_r+0x24>
 80046f8:	f7ff fbdc 	bl	8003eb4 <_free_r>
 80046fc:	2400      	movs	r4, #0
 80046fe:	4620      	mov	r0, r4
 8004700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004704:	f000 f81a 	bl	800473c <_malloc_usable_size_r>
 8004708:	4285      	cmp	r5, r0
 800470a:	4606      	mov	r6, r0
 800470c:	d802      	bhi.n	8004714 <_realloc_r+0x34>
 800470e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004712:	d8f4      	bhi.n	80046fe <_realloc_r+0x1e>
 8004714:	4629      	mov	r1, r5
 8004716:	4640      	mov	r0, r8
 8004718:	f7ff fc38 	bl	8003f8c <_malloc_r>
 800471c:	4607      	mov	r7, r0
 800471e:	2800      	cmp	r0, #0
 8004720:	d0ec      	beq.n	80046fc <_realloc_r+0x1c>
 8004722:	42b5      	cmp	r5, r6
 8004724:	462a      	mov	r2, r5
 8004726:	4621      	mov	r1, r4
 8004728:	bf28      	it	cs
 800472a:	4632      	movcs	r2, r6
 800472c:	f7ff ffca 	bl	80046c4 <memcpy>
 8004730:	4621      	mov	r1, r4
 8004732:	4640      	mov	r0, r8
 8004734:	f7ff fbbe 	bl	8003eb4 <_free_r>
 8004738:	463c      	mov	r4, r7
 800473a:	e7e0      	b.n	80046fe <_realloc_r+0x1e>

0800473c <_malloc_usable_size_r>:
 800473c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004740:	1f18      	subs	r0, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	bfbc      	itt	lt
 8004746:	580b      	ldrlt	r3, [r1, r0]
 8004748:	18c0      	addlt	r0, r0, r3
 800474a:	4770      	bx	lr

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
