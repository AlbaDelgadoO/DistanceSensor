
DistanceSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b64  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003cec  08003cec  00004cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d24  08003d24  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d24  08003d24  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d24  08003d24  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d24  08003d24  00004d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d28  08003d28  00004d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d2c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000014c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000158  20000158  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6eb  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000195e  00000000  00000000  00012727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  00014088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094f  00000000  00000000  00014c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b0c6  00000000  00000000  000155a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2d6  00000000  00000000  0003066d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a43a4  00000000  00000000  0003e943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e2ce7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003208  00000000  00000000  000e2d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000e5f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003cd4 	.word	0x08003cd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003cd4 	.word	0x08003cd4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fb53 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f81b 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f959 	bl	800048c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f927 	bl	800042c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001de:	f000 f851 	bl	8000284 <MX_TIM2_Init>
  MX_TIM15_Init();
 80001e2:	f000 f89d 	bl	8000320 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80001e6:	4808      	ldr	r0, [pc, #32]	@ (8000208 <main+0x40>)
 80001e8:	f002 f922 	bl	8002430 <HAL_TIM_Base_Start>
  uint32_t distance_cm;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t posicion_cadena = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	71fb      	strb	r3, [r7, #7]
  uint8_t lleno = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	71bb      	strb	r3, [r7, #6]
  uint8_t tiempo_pulsacion = 0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	717b      	strb	r3, [r7, #5]
  uint8_t num_total_tiempo = 0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	713b      	strb	r3, [r7, #4]
  uint8_t posicion_real = 0;
 80001fc:	2300      	movs	r3, #0
 80001fe:	70fb      	strb	r3, [r7, #3]
  uint8_t valor_anterior = 0;
 8000200:	2300      	movs	r3, #0
 8000202:	70bb      	strb	r3, [r7, #2]
  while (1)
 8000204:	bf00      	nop
 8000206:	e7fd      	b.n	8000204 <main+0x3c>
 8000208:	20000028 	.word	0x20000028

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	@ 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	@ 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f003 fd2d 	bl	8003c7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023a:	2300      	movs	r3, #0
 800023c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fe3e 	bl	8000ec4 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800024e:	f000 f98b 	bl	8000568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000256:	2300      	movs	r3, #0
 8000258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fe68 	bl	8001f40 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000276:	f000 f977 	bl	8000568 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	@ 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b088      	sub	sp, #32
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800028a:	f107 0310 	add.w	r3, r7, #16
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002a2:	4b1e      	ldr	r3, [pc, #120]	@ (800031c <MX_TIM2_Init+0x98>)
 80002a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80002aa:	4b1c      	ldr	r3, [pc, #112]	@ (800031c <MX_TIM2_Init+0x98>)
 80002ac:	2247      	movs	r2, #71	@ 0x47
 80002ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b0:	4b1a      	ldr	r3, [pc, #104]	@ (800031c <MX_TIM2_Init+0x98>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80002b6:	4b19      	ldr	r3, [pc, #100]	@ (800031c <MX_TIM2_Init+0x98>)
 80002b8:	f04f 32ff 	mov.w	r2, #4294967295
 80002bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002be:	4b17      	ldr	r3, [pc, #92]	@ (800031c <MX_TIM2_Init+0x98>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002c4:	4b15      	ldr	r3, [pc, #84]	@ (800031c <MX_TIM2_Init+0x98>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002ca:	4814      	ldr	r0, [pc, #80]	@ (800031c <MX_TIM2_Init+0x98>)
 80002cc:	f002 f858 	bl	8002380 <HAL_TIM_Base_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80002d6:	f000 f947 	bl	8000568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	4619      	mov	r1, r3
 80002e6:	480d      	ldr	r0, [pc, #52]	@ (800031c <MX_TIM2_Init+0x98>)
 80002e8:	f002 fb64 	bl	80029b4 <HAL_TIM_ConfigClockSource>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80002f2:	f000 f939 	bl	8000568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f6:	2300      	movs	r3, #0
 80002f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4619      	mov	r1, r3
 8000302:	4806      	ldr	r0, [pc, #24]	@ (800031c <MX_TIM2_Init+0x98>)
 8000304:	f003 f816 	bl	8003334 <HAL_TIMEx_MasterConfigSynchronization>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800030e:	f000 f92b 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	3720      	adds	r7, #32
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000028 	.word	0x20000028

08000320 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b096      	sub	sp, #88	@ 0x58
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000326:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000332:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]
 8000342:	615a      	str	r2, [r3, #20]
 8000344:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	222c      	movs	r2, #44	@ 0x2c
 800034a:	2100      	movs	r1, #0
 800034c:	4618      	mov	r0, r3
 800034e:	f003 fc94 	bl	8003c7a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000352:	4b34      	ldr	r3, [pc, #208]	@ (8000424 <MX_TIM15_Init+0x104>)
 8000354:	4a34      	ldr	r2, [pc, #208]	@ (8000428 <MX_TIM15_Init+0x108>)
 8000356:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000358:	4b32      	ldr	r3, [pc, #200]	@ (8000424 <MX_TIM15_Init+0x104>)
 800035a:	2200      	movs	r2, #0
 800035c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800035e:	4b31      	ldr	r3, [pc, #196]	@ (8000424 <MX_TIM15_Init+0x104>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000364:	4b2f      	ldr	r3, [pc, #188]	@ (8000424 <MX_TIM15_Init+0x104>)
 8000366:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800036a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800036c:	4b2d      	ldr	r3, [pc, #180]	@ (8000424 <MX_TIM15_Init+0x104>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000372:	4b2c      	ldr	r3, [pc, #176]	@ (8000424 <MX_TIM15_Init+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000378:	4b2a      	ldr	r3, [pc, #168]	@ (8000424 <MX_TIM15_Init+0x104>)
 800037a:	2200      	movs	r2, #0
 800037c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800037e:	4829      	ldr	r0, [pc, #164]	@ (8000424 <MX_TIM15_Init+0x104>)
 8000380:	f002 f8aa 	bl	80024d8 <HAL_TIM_PWM_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800038a:	f000 f8ed 	bl	8000568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800038e:	2300      	movs	r3, #0
 8000390:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000392:	2300      	movs	r3, #0
 8000394:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000396:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800039a:	4619      	mov	r1, r3
 800039c:	4821      	ldr	r0, [pc, #132]	@ (8000424 <MX_TIM15_Init+0x104>)
 800039e:	f002 ffc9 	bl	8003334 <HAL_TIMEx_MasterConfigSynchronization>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80003a8:	f000 f8de 	bl	8000568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ac:	2360      	movs	r3, #96	@ 0x60
 80003ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003b4:	2300      	movs	r3, #0
 80003b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003b8:	2300      	movs	r3, #0
 80003ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003bc:	2300      	movs	r3, #0
 80003be:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003c0:	2300      	movs	r3, #0
 80003c2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003c4:	2300      	movs	r3, #0
 80003c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003cc:	2204      	movs	r2, #4
 80003ce:	4619      	mov	r1, r3
 80003d0:	4814      	ldr	r0, [pc, #80]	@ (8000424 <MX_TIM15_Init+0x104>)
 80003d2:	f002 f9db 	bl	800278c <HAL_TIM_PWM_ConfigChannel>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80003dc:	f000 f8c4 	bl	8000568 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003fe:	2300      	movs	r3, #0
 8000400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4619      	mov	r1, r3
 8000406:	4807      	ldr	r0, [pc, #28]	@ (8000424 <MX_TIM15_Init+0x104>)
 8000408:	f003 f802 	bl	8003410 <HAL_TIMEx_ConfigBreakDeadTime>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000412:	f000 f8a9 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000416:	4803      	ldr	r0, [pc, #12]	@ (8000424 <MX_TIM15_Init+0x104>)
 8000418:	f000 f914 	bl	8000644 <HAL_TIM_MspPostInit>

}
 800041c:	bf00      	nop
 800041e:	3758      	adds	r7, #88	@ 0x58
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000074 	.word	0x20000074
 8000428:	40014000 	.word	0x40014000

0800042c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000430:	4b14      	ldr	r3, [pc, #80]	@ (8000484 <MX_USART2_UART_Init+0x58>)
 8000432:	4a15      	ldr	r2, [pc, #84]	@ (8000488 <MX_USART2_UART_Init+0x5c>)
 8000434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000436:	4b13      	ldr	r3, [pc, #76]	@ (8000484 <MX_USART2_UART_Init+0x58>)
 8000438:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800043c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800043e:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000444:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <MX_USART2_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <MX_USART2_UART_Init+0x58>)
 8000452:	220c      	movs	r2, #12
 8000454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	@ (8000484 <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800045c:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000462:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <MX_USART2_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800046e:	4805      	ldr	r0, [pc, #20]	@ (8000484 <MX_USART2_UART_Init+0x58>)
 8000470:	f003 f864 	bl	800353c <HAL_UART_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800047a:	f000 f875 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	200000c0 	.word	0x200000c0
 8000488:	40004400 	.word	0x40004400

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 030c 	add.w	r3, r7, #12
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000560 <MX_GPIO_Init+0xd4>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000560 <MX_GPIO_Init+0xd4>)
 80004a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000560 <MX_GPIO_Init+0xd4>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b29      	ldr	r3, [pc, #164]	@ (8000560 <MX_GPIO_Init+0xd4>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a28      	ldr	r2, [pc, #160]	@ (8000560 <MX_GPIO_Init+0xd4>)
 80004c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b26      	ldr	r3, [pc, #152]	@ (8000560 <MX_GPIO_Init+0xd4>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	4b23      	ldr	r3, [pc, #140]	@ (8000560 <MX_GPIO_Init+0xd4>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a22      	ldr	r2, [pc, #136]	@ (8000560 <MX_GPIO_Init+0xd4>)
 80004d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b20      	ldr	r3, [pc, #128]	@ (8000560 <MX_GPIO_Init+0xd4>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	21c0      	movs	r1, #192	@ 0xc0
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f2:	f000 fcab 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2120      	movs	r1, #32
 80004fa:	481a      	ldr	r0, [pc, #104]	@ (8000564 <MX_GPIO_Init+0xd8>)
 80004fc:	f000 fca6 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = INTERRUPTOR_Pin;
 8000500:	2310      	movs	r3, #16
 8000502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000504:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	4619      	mov	r1, r3
 8000514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000518:	f000 fb26 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800051c:	23c0      	movs	r3, #192	@ 0xc0
 800051e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	2301      	movs	r3, #1
 8000522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	2300      	movs	r3, #0
 800052a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	4619      	mov	r1, r3
 8000532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000536:	f000 fb17 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800053a:	2320      	movs	r3, #32
 800053c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4619      	mov	r1, r3
 8000550:	4804      	ldr	r0, [pc, #16]	@ (8000564 <MX_GPIO_Init+0xd8>)
 8000552:	f000 fb09 	bl	8000b68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000556:	bf00      	nop
 8000558:	3720      	adds	r7, #32
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	48000400 	.word	0x48000400

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i
}
 800056e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <Error_Handler+0x8>

08000574 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <HAL_MspInit+0x44>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <HAL_MspInit+0x44>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6193      	str	r3, [r2, #24]
 8000586:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <HAL_MspInit+0x44>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <HAL_MspInit+0x44>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <HAL_MspInit+0x44>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059c:	61d3      	str	r3, [r2, #28]
 800059e:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <HAL_MspInit+0x44>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005cc:	d113      	bne.n	80005f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <HAL_TIM_Base_MspInit+0x44>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000600 <HAL_TIM_Base_MspInit+0x44>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <HAL_TIM_Base_MspInit+0x44>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	201c      	movs	r0, #28
 80005ec:	f000 fa85 	bl	8000afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005f0:	201c      	movs	r0, #28
 80005f2:	f000 fa9e 	bl	8000b32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <HAL_TIM_PWM_MspInit+0x38>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d10b      	bne.n	800062e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <HAL_TIM_PWM_MspInit+0x3c>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a09      	ldr	r2, [pc, #36]	@ (8000640 <HAL_TIM_PWM_MspInit+0x3c>)
 800061c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <HAL_TIM_PWM_MspInit+0x3c>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40014000 	.word	0x40014000
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a11      	ldr	r2, [pc, #68]	@ (80006a8 <HAL_TIM_MspPostInit+0x64>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d11c      	bne.n	80006a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <HAL_TIM_MspPostInit+0x68>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a10      	ldr	r2, [pc, #64]	@ (80006ac <HAL_TIM_MspPostInit+0x68>)
 800066c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <HAL_TIM_MspPostInit+0x68>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA3     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800067e:	2308      	movs	r3, #8
 8000680:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800068e:	2309      	movs	r3, #9
 8000690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069c:	f000 fa64 	bl	8000b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40014000 	.word	0x40014000
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a18      	ldr	r2, [pc, #96]	@ (8000730 <HAL_UART_MspInit+0x80>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d129      	bne.n	8000726 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006d2:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <HAL_UART_MspInit+0x84>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a17      	ldr	r2, [pc, #92]	@ (8000734 <HAL_UART_MspInit+0x84>)
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <HAL_UART_MspInit+0x84>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <HAL_UART_MspInit+0x84>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a11      	ldr	r2, [pc, #68]	@ (8000734 <HAL_UART_MspInit+0x84>)
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <HAL_UART_MspInit+0x84>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000702:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000714:	2307      	movs	r3, #7
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000722:	f000 fa21 	bl	8000b68 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000726:	bf00      	nop
 8000728:	3728      	adds	r7, #40	@ 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40004400 	.word	0x40004400
 8000734:	40021000 	.word	0x40021000

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <NMI_Handler+0x4>

08000740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <MemManage_Handler+0x4>

08000750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <BusFault_Handler+0x4>

08000758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <UsageFault_Handler+0x4>

08000760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	delay_ms++;
 8000790:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <SysTick_Handler+0x18>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	4a03      	ldr	r2, [pc, #12]	@ (80007a4 <SysTick_Handler+0x18>)
 8000798:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079a:	f000 f8b3 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000014c 	.word	0x2000014c

080007a8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if(delay_ms-rebotes > 50){
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <EXTI4_IRQHandler+0x38>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <EXTI4_IRQHandler+0x3c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	2b32      	cmp	r3, #50	@ 0x32
 80007b8:	d90d      	bls.n	80007d6 <EXTI4_IRQHandler+0x2e>
		if ((GPIOA->IDR & (1UL << 4))==0)
 80007ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80007be:	691b      	ldr	r3, [r3, #16]
 80007c0:	f003 0310 	and.w	r3, r3, #16
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <EXTI4_IRQHandler+0x26>
			flag = 1;
 80007c8:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <EXTI4_IRQHandler+0x40>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
		rebotes = delay_ms;
 80007ce:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <EXTI4_IRQHandler+0x38>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a04      	ldr	r2, [pc, #16]	@ (80007e4 <EXTI4_IRQHandler+0x3c>)
 80007d4:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERRUPTOR_Pin);
 80007d6:	2010      	movs	r0, #16
 80007d8:	f000 fb50 	bl	8000e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000014c 	.word	0x2000014c
 80007e4:	20000150 	.word	0x20000150
 80007e8:	20000148 	.word	0x20000148

080007ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007f0:	4802      	ldr	r0, [pc, #8]	@ (80007fc <TIM2_IRQHandler+0x10>)
 80007f2:	f001 fec8 	bl	8002586 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000028 	.word	0x20000028

08000800 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <SystemInit+0x20>)
 8000806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800080a:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <SystemInit+0x20>)
 800080c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000810:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000824:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800085c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000828:	f7ff ffea 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	@ (8000860 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	@ (8000864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	@ (8000868 <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	@ (8000870 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000852:	f003 fa1b 	bl	8003c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000856:	f7ff fcb7 	bl	80001c8 <main>

0800085a <LoopForever>:

LoopForever:
    b LoopForever
 800085a:	e7fe      	b.n	800085a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800085c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000868:	08003d2c 	.word	0x08003d2c
  ldr r2, =_sbss
 800086c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000870:	20000158 	.word	0x20000158

08000874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_2_IRQHandler>
	...

08000878 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <HAL_Init+0x28>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	@ (80008a0 <HAL_Init+0x28>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f92b 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	2000      	movs	r0, #0
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff fe6e 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f943 	bl	8000b4e <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 f90b 	bl	8000afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	@ (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_IncTick+0x20>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_IncTick+0x24>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <HAL_IncTick+0x24>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008
 8000928:	20000154 	.word	0x20000154

0800092c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000930:	4b03      	ldr	r3, [pc, #12]	@ (8000940 <HAL_GetTick+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000154 	.word	0x20000154

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	@ (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4907      	ldr	r1, [pc, #28]	@ (80009e0 <__NVIC_EnableIRQ+0x38>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	@ (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	@ (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	@ 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	@ 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f7ff ff8e 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff29 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff3e 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff8e 	bl	8000a38 <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5d 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff31 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa2 	bl	8000aa0 <SysTick_Config>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e14e      	b.n	8000e16 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 8140 	beq.w	8000e10 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d005      	beq.n	8000ba8 <HAL_GPIO_Init+0x40>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d130      	bne.n	8000c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bde:	2201      	movs	r2, #1
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	091b      	lsrs	r3, r3, #4
 8000bf4:	f003 0201 	and.w	r2, r3, #1
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d017      	beq.n	8000c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2203      	movs	r2, #3
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d123      	bne.n	8000c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	08da      	lsrs	r2, r3, #3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3208      	adds	r2, #8
 8000c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	220f      	movs	r2, #15
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	691a      	ldr	r2, [r3, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	6939      	ldr	r1, [r7, #16]
 8000c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0203 	and.w	r2, r3, #3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 809a 	beq.w	8000e10 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cdc:	4b55      	ldr	r3, [pc, #340]	@ (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a54      	ldr	r2, [pc, #336]	@ (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b52      	ldr	r3, [pc, #328]	@ (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cf4:	4a50      	ldr	r2, [pc, #320]	@ (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	220f      	movs	r2, #15
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d1e:	d013      	beq.n	8000d48 <HAL_GPIO_Init+0x1e0>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a46      	ldr	r2, [pc, #280]	@ (8000e3c <HAL_GPIO_Init+0x2d4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d00d      	beq.n	8000d44 <HAL_GPIO_Init+0x1dc>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a45      	ldr	r2, [pc, #276]	@ (8000e40 <HAL_GPIO_Init+0x2d8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d007      	beq.n	8000d40 <HAL_GPIO_Init+0x1d8>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a44      	ldr	r2, [pc, #272]	@ (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d101      	bne.n	8000d3c <HAL_GPIO_Init+0x1d4>
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e006      	b.n	8000d4a <HAL_GPIO_Init+0x1e2>
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	e004      	b.n	8000d4a <HAL_GPIO_Init+0x1e2>
 8000d40:	2302      	movs	r3, #2
 8000d42:	e002      	b.n	8000d4a <HAL_GPIO_Init+0x1e2>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <HAL_GPIO_Init+0x1e2>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	f002 0203 	and.w	r2, r2, #3
 8000d50:	0092      	lsls	r2, r2, #2
 8000d52:	4093      	lsls	r3, r2
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d5a:	4937      	ldr	r1, [pc, #220]	@ (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	089b      	lsrs	r3, r3, #2
 8000d60:	3302      	adds	r3, #2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d68:	4b37      	ldr	r3, [pc, #220]	@ (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d92:	4b2d      	ldr	r3, [pc, #180]	@ (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000db6:	4a24      	ldr	r2, [pc, #144]	@ (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000de0:	4a19      	ldr	r2, [pc, #100]	@ (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f47f aea9 	bne.w	8000b78 <HAL_GPIO_Init+0x10>
  }
}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	371c      	adds	r7, #28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	48000800 	.word	0x48000800
 8000e44:	48000c00 	.word	0x48000c00
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e5c:	787b      	ldrb	r3, [r7, #1]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e86:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e88:	695a      	ldr	r2, [r3, #20]
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e92:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f806 	bl	8000eac <HAL_GPIO_EXTI_Callback>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40010400 	.word	0x40010400

08000eac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ed0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ed4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f001 b823 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 817d 	beq.w	80011fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f00:	4bbc      	ldr	r3, [pc, #752]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d00c      	beq.n	8000f26 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f0c:	4bb9      	ldr	r3, [pc, #740]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d15c      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x10e>
 8000f18:	4bb6      	ldr	r3, [pc, #728]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f24:	d155      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x10e>
 8000f26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f2a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3e:	fab3 f383 	clz	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	095b      	lsrs	r3, r3, #5
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d102      	bne.n	8000f58 <HAL_RCC_OscConfig+0x94>
 8000f52:	4ba8      	ldr	r3, [pc, #672]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	e015      	b.n	8000f84 <HAL_RCC_OscConfig+0xc0>
 8000f58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f5c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000f64:	fa93 f3a3 	rbit	r3, r3
 8000f68:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000f6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f70:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000f74:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000f80:	4b9c      	ldr	r3, [pc, #624]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f84:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f88:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000f8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000f90:	fa92 f2a2 	rbit	r2, r2
 8000f94:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000f98:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000f9c:	fab2 f282 	clz	r2, r2
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	f042 0220 	orr.w	r2, r2, #32
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	f002 021f 	and.w	r2, r2, #31
 8000fac:	2101      	movs	r1, #1
 8000fae:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 811f 	beq.w	80011f8 <HAL_RCC_OscConfig+0x334>
 8000fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f040 8116 	bne.w	80011f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f000 bfaf 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fe2:	d106      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x12e>
 8000fe4:	4b83      	ldr	r3, [pc, #524]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a82      	ldr	r2, [pc, #520]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	e036      	b.n	8001060 <HAL_RCC_OscConfig+0x19c>
 8000ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ff6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x158>
 8001002:	4b7c      	ldr	r3, [pc, #496]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a7b      	ldr	r2, [pc, #492]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	4b79      	ldr	r3, [pc, #484]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a78      	ldr	r2, [pc, #480]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001014:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e021      	b.n	8001060 <HAL_RCC_OscConfig+0x19c>
 800101c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001020:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x184>
 800102e:	4b71      	ldr	r3, [pc, #452]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a70      	ldr	r2, [pc, #448]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b6e      	ldr	r3, [pc, #440]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a6d      	ldr	r2, [pc, #436]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e00b      	b.n	8001060 <HAL_RCC_OscConfig+0x19c>
 8001048:	4b6a      	ldr	r3, [pc, #424]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a69      	ldr	r2, [pc, #420]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 800104e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b67      	ldr	r3, [pc, #412]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a66      	ldr	r2, [pc, #408]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 800105a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800105e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001060:	4b64      	ldr	r3, [pc, #400]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001064:	f023 020f 	bic.w	r2, r3, #15
 8001068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800106c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	495f      	ldr	r1, [pc, #380]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001076:	4313      	orrs	r3, r2
 8001078:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800107a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800107e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d059      	beq.n	800113e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108a:	f7ff fc4f 	bl	800092c <HAL_GetTick>
 800108e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	e00a      	b.n	80010aa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fc4a 	bl	800092c <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b64      	cmp	r3, #100	@ 0x64
 80010a2:	d902      	bls.n	80010aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	f000 bf43 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
 80010aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010ae:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80010be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	fab3 f383 	clz	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	095b      	lsrs	r3, r3, #5
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d102      	bne.n	80010dc <HAL_RCC_OscConfig+0x218>
 80010d6:	4b47      	ldr	r3, [pc, #284]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	e015      	b.n	8001108 <HAL_RCC_OscConfig+0x244>
 80010dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010e0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80010f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010f4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80010f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001104:	4b3b      	ldr	r3, [pc, #236]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800110c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001110:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001114:	fa92 f2a2 	rbit	r2, r2
 8001118:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800111c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001120:	fab2 f282 	clz	r2, r2
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	f042 0220 	orr.w	r2, r2, #32
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	f002 021f 	and.w	r2, r2, #31
 8001130:	2101      	movs	r1, #1
 8001132:	fa01 f202 	lsl.w	r2, r1, r2
 8001136:	4013      	ands	r3, r2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0ab      	beq.n	8001094 <HAL_RCC_OscConfig+0x1d0>
 800113c:	e05d      	b.n	80011fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff fbf5 	bl	800092c <HAL_GetTick>
 8001142:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	e00a      	b.n	800115e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fbf0 	bl	800092c <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b64      	cmp	r3, #100	@ 0x64
 8001156:	d902      	bls.n	800115e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	f000 bee9 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
 800115e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001162:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001172:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	095b      	lsrs	r3, r3, #5
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b01      	cmp	r3, #1
 8001188:	d102      	bne.n	8001190 <HAL_RCC_OscConfig+0x2cc>
 800118a:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	e015      	b.n	80011bc <HAL_RCC_OscConfig+0x2f8>
 8001190:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001194:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001198:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800119c:	fa93 f3a3 	rbit	r3, r3
 80011a0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80011a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011a8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80011ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80011b0:	fa93 f3a3 	rbit	r3, r3
 80011b4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_RCC_OscConfig+0x330>)
 80011ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011c0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80011c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80011c8:	fa92 f2a2 	rbit	r2, r2
 80011cc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80011d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80011d4:	fab2 f282 	clz	r2, r2
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	f042 0220 	orr.w	r2, r2, #32
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	f002 021f 	and.w	r2, r2, #31
 80011e4:	2101      	movs	r1, #1
 80011e6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1ab      	bne.n	8001148 <HAL_RCC_OscConfig+0x284>
 80011f0:	e003      	b.n	80011fa <HAL_RCC_OscConfig+0x336>
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 817d 	beq.w	800150a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001210:	4ba6      	ldr	r3, [pc, #664]	@ (80014ac <HAL_RCC_OscConfig+0x5e8>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00b      	beq.n	8001234 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800121c:	4ba3      	ldr	r3, [pc, #652]	@ (80014ac <HAL_RCC_OscConfig+0x5e8>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b08      	cmp	r3, #8
 8001226:	d172      	bne.n	800130e <HAL_RCC_OscConfig+0x44a>
 8001228:	4ba0      	ldr	r3, [pc, #640]	@ (80014ac <HAL_RCC_OscConfig+0x5e8>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d16c      	bne.n	800130e <HAL_RCC_OscConfig+0x44a>
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001246:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	095b      	lsrs	r3, r3, #5
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d102      	bne.n	8001264 <HAL_RCC_OscConfig+0x3a0>
 800125e:	4b93      	ldr	r3, [pc, #588]	@ (80014ac <HAL_RCC_OscConfig+0x5e8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	e013      	b.n	800128c <HAL_RCC_OscConfig+0x3c8>
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800127c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001280:	fa93 f3a3 	rbit	r3, r3
 8001284:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001288:	4b88      	ldr	r3, [pc, #544]	@ (80014ac <HAL_RCC_OscConfig+0x5e8>)
 800128a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128c:	2202      	movs	r2, #2
 800128e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001292:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001296:	fa92 f2a2 	rbit	r2, r2
 800129a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800129e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80012a2:	fab2 f282 	clz	r2, r2
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	f042 0220 	orr.w	r2, r2, #32
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	f002 021f 	and.w	r2, r2, #31
 80012b2:	2101      	movs	r1, #1
 80012b4:	fa01 f202 	lsl.w	r2, r1, r2
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00a      	beq.n	80012d4 <HAL_RCC_OscConfig+0x410>
 80012be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d002      	beq.n	80012d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	f000 be2e 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d4:	4b75      	ldr	r3, [pc, #468]	@ (80014ac <HAL_RCC_OscConfig+0x5e8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	21f8      	movs	r1, #248	@ 0xf8
 80012ea:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80012f2:	fa91 f1a1 	rbit	r1, r1
 80012f6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80012fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80012fe:	fab1 f181 	clz	r1, r1
 8001302:	b2c9      	uxtb	r1, r1
 8001304:	408b      	lsls	r3, r1
 8001306:	4969      	ldr	r1, [pc, #420]	@ (80014ac <HAL_RCC_OscConfig+0x5e8>)
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130c:	e0fd      	b.n	800150a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800130e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001312:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 8088 	beq.w	8001430 <HAL_RCC_OscConfig+0x56c>
 8001320:	2301      	movs	r3, #1
 8001322:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001332:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001340:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	461a      	mov	r2, r3
 8001348:	2301      	movs	r3, #1
 800134a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff faee 	bl	800092c <HAL_GetTick>
 8001350:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fae9 	bl	800092c <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d902      	bls.n	800136c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	f000 bde2 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001376:	fa93 f3a3 	rbit	r3, r3
 800137a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800137e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001382:	fab3 f383 	clz	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	095b      	lsrs	r3, r3, #5
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d102      	bne.n	800139c <HAL_RCC_OscConfig+0x4d8>
 8001396:	4b45      	ldr	r3, [pc, #276]	@ (80014ac <HAL_RCC_OscConfig+0x5e8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	e013      	b.n	80013c4 <HAL_RCC_OscConfig+0x500>
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80013ae:	2302      	movs	r3, #2
 80013b0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80013b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80013c0:	4b3a      	ldr	r3, [pc, #232]	@ (80014ac <HAL_RCC_OscConfig+0x5e8>)
 80013c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c4:	2202      	movs	r2, #2
 80013c6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80013ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80013ce:	fa92 f2a2 	rbit	r2, r2
 80013d2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80013d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80013da:	fab2 f282 	clz	r2, r2
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	f042 0220 	orr.w	r2, r2, #32
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	f002 021f 	and.w	r2, r2, #31
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f202 	lsl.w	r2, r1, r2
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0af      	beq.n	8001356 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b2d      	ldr	r3, [pc, #180]	@ (80014ac <HAL_RCC_OscConfig+0x5e8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001402:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	21f8      	movs	r1, #248	@ 0xf8
 800140c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001414:	fa91 f1a1 	rbit	r1, r1
 8001418:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800141c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001420:	fab1 f181 	clz	r1, r1
 8001424:	b2c9      	uxtb	r1, r1
 8001426:	408b      	lsls	r3, r1
 8001428:	4920      	ldr	r1, [pc, #128]	@ (80014ac <HAL_RCC_OscConfig+0x5e8>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
 800142e:	e06c      	b.n	800150a <HAL_RCC_OscConfig+0x646>
 8001430:	2301      	movs	r3, #1
 8001432:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001442:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001446:	fab3 f383 	clz	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001450:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	461a      	mov	r2, r3
 8001458:	2300      	movs	r3, #0
 800145a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fa66 	bl	800092c <HAL_GetTick>
 8001460:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fa61 	bl	800092c <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d902      	bls.n	800147c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	f000 bd5a 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
 800147c:	2302      	movs	r3, #2
 800147e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800148e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	095b      	lsrs	r3, r3, #5
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d104      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5ec>
 80014a6:	4b01      	ldr	r3, [pc, #4]	@ (80014ac <HAL_RCC_OscConfig+0x5e8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	e015      	b.n	80014d8 <HAL_RCC_OscConfig+0x614>
 80014ac:	40021000 	.word	0x40021000
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80014c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80014d4:	4bc8      	ldr	r3, [pc, #800]	@ (80017f8 <HAL_RCC_OscConfig+0x934>)
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	2202      	movs	r2, #2
 80014da:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80014de:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80014e2:	fa92 f2a2 	rbit	r2, r2
 80014e6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80014ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80014ee:	fab2 f282 	clz	r2, r2
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	f042 0220 	orr.w	r2, r2, #32
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	f002 021f 	and.w	r2, r2, #31
 80014fe:	2101      	movs	r1, #1
 8001500:	fa01 f202 	lsl.w	r2, r1, r2
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1ad      	bne.n	8001466 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8110 	beq.w	8001740 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001524:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d079      	beq.n	8001624 <HAL_RCC_OscConfig+0x760>
 8001530:	2301      	movs	r3, #1
 8001532:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001546:	fab3 f383 	clz	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	4bab      	ldr	r3, [pc, #684]	@ (80017fc <HAL_RCC_OscConfig+0x938>)
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	461a      	mov	r2, r3
 8001556:	2301      	movs	r3, #1
 8001558:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff f9e7 	bl	800092c <HAL_GetTick>
 800155e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff f9e2 	bl	800092c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d902      	bls.n	800157a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	f000 bcdb 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
 800157a:	2302      	movs	r3, #2
 800157c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800158c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001590:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001594:	2202      	movs	r2, #2
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	fa93 f2a3 	rbit	r2, r3
 80015a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80015b8:	2202      	movs	r2, #2
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	fa93 f2a3 	rbit	r2, r3
 80015ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d4:	4b88      	ldr	r3, [pc, #544]	@ (80017f8 <HAL_RCC_OscConfig+0x934>)
 80015d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80015e0:	2102      	movs	r1, #2
 80015e2:	6019      	str	r1, [r3, #0]
 80015e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	fa93 f1a3 	rbit	r1, r3
 80015f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015fa:	6019      	str	r1, [r3, #0]
  return result;
 80015fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001600:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	2101      	movs	r1, #1
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0a0      	beq.n	8001564 <HAL_RCC_OscConfig+0x6a0>
 8001622:	e08d      	b.n	8001740 <HAL_RCC_OscConfig+0x87c>
 8001624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001628:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001634:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fa93 f2a3 	rbit	r2, r3
 800163e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001642:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001646:	601a      	str	r2, [r3, #0]
  return result;
 8001648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001650:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	4b68      	ldr	r3, [pc, #416]	@ (80017fc <HAL_RCC_OscConfig+0x938>)
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	461a      	mov	r2, r3
 8001662:	2300      	movs	r3, #0
 8001664:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001666:	f7ff f961 	bl	800092c <HAL_GetTick>
 800166a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff f95c 	bl	800092c <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d902      	bls.n	8001686 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	f000 bc55 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
 8001686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800168a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800168e:	2202      	movs	r2, #2
 8001690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001696:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	fa93 f2a3 	rbit	r2, r3
 80016a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016b2:	2202      	movs	r2, #2
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	fa93 f2a3 	rbit	r2, r3
 80016c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80016d6:	2202      	movs	r2, #2
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	fa93 f2a3 	rbit	r2, r3
 80016e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80016f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f2:	4b41      	ldr	r3, [pc, #260]	@ (80017f8 <HAL_RCC_OscConfig+0x934>)
 80016f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016fa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80016fe:	2102      	movs	r1, #2
 8001700:	6019      	str	r1, [r3, #0]
 8001702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001706:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	fa93 f1a3 	rbit	r1, r3
 8001710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001714:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001718:	6019      	str	r1, [r3, #0]
  return result;
 800171a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d197      	bne.n	8001670 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001744:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 81a1 	beq.w	8001a98 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175c:	4b26      	ldr	r3, [pc, #152]	@ (80017f8 <HAL_RCC_OscConfig+0x934>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d116      	bne.n	8001796 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001768:	4b23      	ldr	r3, [pc, #140]	@ (80017f8 <HAL_RCC_OscConfig+0x934>)
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	4a22      	ldr	r2, [pc, #136]	@ (80017f8 <HAL_RCC_OscConfig+0x934>)
 800176e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001772:	61d3      	str	r3, [r2, #28]
 8001774:	4b20      	ldr	r3, [pc, #128]	@ (80017f8 <HAL_RCC_OscConfig+0x934>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800177c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001780:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800178e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001790:	2301      	movs	r3, #1
 8001792:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001796:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <HAL_RCC_OscConfig+0x93c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d11a      	bne.n	80017d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a2:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <HAL_RCC_OscConfig+0x93c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a16      	ldr	r2, [pc, #88]	@ (8001800 <HAL_RCC_OscConfig+0x93c>)
 80017a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ae:	f7ff f8bd 	bl	800092c <HAL_GetTick>
 80017b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b6:	e009      	b.n	80017cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b8:	f7ff f8b8 	bl	800092c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b64      	cmp	r3, #100	@ 0x64
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e3b1      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_RCC_OscConfig+0x93c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ef      	beq.n	80017b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d10d      	bne.n	8001804 <HAL_RCC_OscConfig+0x940>
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <HAL_RCC_OscConfig+0x934>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a02      	ldr	r2, [pc, #8]	@ (80017f8 <HAL_RCC_OscConfig+0x934>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	e03c      	b.n	8001870 <HAL_RCC_OscConfig+0x9ac>
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	10908120 	.word	0x10908120
 8001800:	40007000 	.word	0x40007000
 8001804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001808:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10c      	bne.n	800182e <HAL_RCC_OscConfig+0x96a>
 8001814:	4bc1      	ldr	r3, [pc, #772]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4ac0      	ldr	r2, [pc, #768]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6213      	str	r3, [r2, #32]
 8001820:	4bbe      	ldr	r3, [pc, #760]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4abd      	ldr	r2, [pc, #756]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001826:	f023 0304 	bic.w	r3, r3, #4
 800182a:	6213      	str	r3, [r2, #32]
 800182c:	e020      	b.n	8001870 <HAL_RCC_OscConfig+0x9ac>
 800182e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001832:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x994>
 800183e:	4bb7      	ldr	r3, [pc, #732]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4ab6      	ldr	r2, [pc, #728]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6213      	str	r3, [r2, #32]
 800184a:	4bb4      	ldr	r3, [pc, #720]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4ab3      	ldr	r2, [pc, #716]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6213      	str	r3, [r2, #32]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0x9ac>
 8001858:	4bb0      	ldr	r3, [pc, #704]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4aaf      	ldr	r2, [pc, #700]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	6213      	str	r3, [r2, #32]
 8001864:	4bad      	ldr	r3, [pc, #692]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4aac      	ldr	r2, [pc, #688]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 800186a:	f023 0304 	bic.w	r3, r3, #4
 800186e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001874:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 8081 	beq.w	8001984 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001882:	f7ff f853 	bl	800092c <HAL_GetTick>
 8001886:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188a:	e00b      	b.n	80018a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188c:	f7ff f84e 	bl	800092c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189c:	4293      	cmp	r3, r2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e345      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
 80018a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80018ac:	2202      	movs	r2, #2
 80018ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	fa93 f2a3 	rbit	r2, r3
 80018be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018cc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80018d0:	2202      	movs	r2, #2
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fa93 f2a3 	rbit	r2, r3
 80018e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80018ea:	601a      	str	r2, [r3, #0]
  return result;
 80018ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80018f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	095b      	lsrs	r3, r3, #5
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d102      	bne.n	8001910 <HAL_RCC_OscConfig+0xa4c>
 800190a:	4b84      	ldr	r3, [pc, #528]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	e013      	b.n	8001938 <HAL_RCC_OscConfig+0xa74>
 8001910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001914:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001918:	2202      	movs	r2, #2
 800191a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001920:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	fa93 f2a3 	rbit	r2, r3
 800192a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	4b79      	ldr	r3, [pc, #484]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800193c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001940:	2102      	movs	r1, #2
 8001942:	6011      	str	r1, [r2, #0]
 8001944:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001948:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	fa92 f1a2 	rbit	r1, r2
 8001952:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001956:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800195a:	6011      	str	r1, [r2, #0]
  return result;
 800195c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001960:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	fab2 f282 	clz	r2, r2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f002 021f 	and.w	r2, r2, #31
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d084      	beq.n	800188c <HAL_RCC_OscConfig+0x9c8>
 8001982:	e07f      	b.n	8001a84 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7fe ffd2 	bl	800092c <HAL_GetTick>
 8001988:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	e00b      	b.n	80019a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7fe ffcd 	bl	800092c <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e2c4      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
 80019a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019aa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80019ae:	2202      	movs	r2, #2
 80019b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ce:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80019d2:	2202      	movs	r2, #2
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fa93 f2a3 	rbit	r2, r3
 80019e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80019ec:	601a      	str	r2, [r3, #0]
  return result;
 80019ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80019f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d102      	bne.n	8001a12 <HAL_RCC_OscConfig+0xb4e>
 8001a0c:	4b43      	ldr	r3, [pc, #268]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	e013      	b.n	8001a3a <HAL_RCC_OscConfig+0xb76>
 8001a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a16:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a22:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fa93 f2a3 	rbit	r2, r3
 8001a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a30:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	4b39      	ldr	r3, [pc, #228]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a3e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001a42:	2102      	movs	r1, #2
 8001a44:	6011      	str	r1, [r2, #0]
 8001a46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a4a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	fa92 f1a2 	rbit	r1, r2
 8001a54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a58:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001a5c:	6011      	str	r1, [r2, #0]
  return result;
 8001a5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a62:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	fab2 f282 	clz	r2, r2
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f002 021f 	and.w	r2, r2, #31
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d184      	bne.n	800198e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a84:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	4a22      	ldr	r2, [pc, #136]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 8242 	beq.w	8001f2e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	f000 8213 	beq.w	8001ede <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001abc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	f040 8162 	bne.w	8001d8e <HAL_RCC_OscConfig+0xeca>
 8001aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ace:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001ad2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001adc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	fa93 f2a3 	rbit	r2, r3
 8001ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aea:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001aee:	601a      	str	r2, [r3, #0]
  return result;
 8001af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001af8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b04:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7fe ff0c 	bl	800092c <HAL_GetTick>
 8001b14:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b18:	e00c      	b.n	8001b34 <HAL_RCC_OscConfig+0xc70>
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b20:	f7fe ff04 	bl	800092c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1fd      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
 8001b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b38:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001b3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b46:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	fa93 f2a3 	rbit	r2, r3
 8001b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b54:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001b58:	601a      	str	r2, [r3, #0]
  return result;
 8001b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001b62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d102      	bne.n	8001b7e <HAL_RCC_OscConfig+0xcba>
 8001b78:	4bb0      	ldr	r3, [pc, #704]	@ (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e027      	b.n	8001bce <HAL_RCC_OscConfig+0xd0a>
 8001b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b82:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001b86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b90:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	fa93 f2a3 	rbit	r2, r3
 8001b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001bac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	fa93 f2a3 	rbit	r2, r3
 8001bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	4b9c      	ldr	r3, [pc, #624]	@ (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bd2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001bd6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bda:	6011      	str	r1, [r2, #0]
 8001bdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001be0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	fa92 f1a2 	rbit	r1, r2
 8001bea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bee:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001bf2:	6011      	str	r1, [r2, #0]
  return result;
 8001bf4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bf8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	fab2 f282 	clz	r2, r2
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	f042 0220 	orr.w	r2, r2, #32
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	f002 021f 	and.w	r2, r2, #31
 8001c0e:	2101      	movs	r1, #1
 8001c10:	fa01 f202 	lsl.w	r2, r1, r2
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d182      	bne.n	8001b20 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1a:	4b88      	ldr	r3, [pc, #544]	@ (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	497f      	ldr	r1, [pc, #508]	@ (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
 8001c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c46:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001c4a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c54:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	fa93 f2a3 	rbit	r2, r3
 8001c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c62:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001c66:	601a      	str	r2, [r3, #0]
  return result;
 8001c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001c70:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c7c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	461a      	mov	r2, r3
 8001c84:	2301      	movs	r3, #1
 8001c86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7fe fe50 	bl	800092c <HAL_GetTick>
 8001c8c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c90:	e009      	b.n	8001ca6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c92:	f7fe fe4b 	bl	800092c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e144      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
 8001ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001caa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001cae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	fa93 f2a3 	rbit	r2, r3
 8001cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001cca:	601a      	str	r2, [r3, #0]
  return result;
 8001ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001cd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	095b      	lsrs	r3, r3, #5
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d102      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xe2c>
 8001cea:	4b54      	ldr	r3, [pc, #336]	@ (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	e027      	b.n	8001d40 <HAL_RCC_OscConfig+0xe7c>
 8001cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001cf8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d02:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d10:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001d1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d28:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	fa93 f2a3 	rbit	r2, r3
 8001d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d36:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d44:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001d48:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d4c:	6011      	str	r1, [r2, #0]
 8001d4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d52:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	fa92 f1a2 	rbit	r1, r2
 8001d5c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d60:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001d64:	6011      	str	r1, [r2, #0]
  return result;
 8001d66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d6a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	fab2 f282 	clz	r2, r2
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f042 0220 	orr.w	r2, r2, #32
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f002 021f 	and.w	r2, r2, #31
 8001d80:	2101      	movs	r1, #1
 8001d82:	fa01 f202 	lsl.w	r2, r1, r2
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d082      	beq.n	8001c92 <HAL_RCC_OscConfig+0xdce>
 8001d8c:	e0cf      	b.n	8001f2e <HAL_RCC_OscConfig+0x106a>
 8001d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d92:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001d96:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	fa93 f2a3 	rbit	r2, r3
 8001daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dae:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001db2:	601a      	str	r2, [r3, #0]
  return result;
 8001db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001dbc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001dc8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fdaa 	bl	800092c <HAL_GetTick>
 8001dd8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ddc:	e009      	b.n	8001df2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dde:	f7fe fda5 	bl	800092c <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e09e      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
 8001df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001dfa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e04:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fa93 f2a3 	rbit	r2, r3
 8001e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e12:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001e16:	601a      	str	r2, [r3, #0]
  return result;
 8001e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001e20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d104      	bne.n	8001e40 <HAL_RCC_OscConfig+0xf7c>
 8001e36:	4b01      	ldr	r3, [pc, #4]	@ (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e029      	b.n	8001e90 <HAL_RCC_OscConfig+0xfcc>
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e44:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001e48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e52:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fa93 f2a3 	rbit	r2, r3
 8001e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e60:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001e6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e78:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	fa93 f2a3 	rbit	r2, r3
 8001e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e86:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f3c <HAL_RCC_OscConfig+0x1078>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e94:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001e98:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e9c:	6011      	str	r1, [r2, #0]
 8001e9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ea2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	fa92 f1a2 	rbit	r1, r2
 8001eac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eb0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001eb4:	6011      	str	r1, [r2, #0]
  return result;
 8001eb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eba:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	fab2 f282 	clz	r2, r2
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	f042 0220 	orr.w	r2, r2, #32
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f002 021f 	and.w	r2, r2, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d180      	bne.n	8001dde <HAL_RCC_OscConfig+0xf1a>
 8001edc:	e027      	b.n	8001f2e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e01e      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef2:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_RCC_OscConfig+0x1078>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001efa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001efe:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d10b      	bne.n	8001f2a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f16:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000

08001f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b09e      	sub	sp, #120	@ 0x78
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e162      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b90      	ldr	r3, [pc, #576]	@ (800219c <HAL_RCC_ClockConfig+0x25c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d910      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b8d      	ldr	r3, [pc, #564]	@ (800219c <HAL_RCC_ClockConfig+0x25c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0207 	bic.w	r2, r3, #7
 8001f6e:	498b      	ldr	r1, [pc, #556]	@ (800219c <HAL_RCC_ClockConfig+0x25c>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b89      	ldr	r3, [pc, #548]	@ (800219c <HAL_RCC_ClockConfig+0x25c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e14a      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f94:	4b82      	ldr	r3, [pc, #520]	@ (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	497f      	ldr	r1, [pc, #508]	@ (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80dc 	beq.w	800216c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d13c      	bne.n	8002036 <HAL_RCC_ClockConfig+0xf6>
 8001fbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fc0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d102      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xa6>
 8001fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	e00f      	b.n	8002006 <HAL_RCC_ClockConfig+0xc6>
 8001fe6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ff4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ff8:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ffa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002002:	4b67      	ldr	r3, [pc, #412]	@ (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800200a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800200c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800200e:	fa92 f2a2 	rbit	r2, r2
 8002012:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002014:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002016:	fab2 f282 	clz	r2, r2
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	f042 0220 	orr.w	r2, r2, #32
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	f002 021f 	and.w	r2, r2, #31
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f202 	lsl.w	r2, r1, r2
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d17b      	bne.n	800212a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0f3      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d13c      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x178>
 800203e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002042:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800204c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	095b      	lsrs	r3, r3, #5
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d102      	bne.n	8002068 <HAL_RCC_ClockConfig+0x128>
 8002062:	4b4f      	ldr	r3, [pc, #316]	@ (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	e00f      	b.n	8002088 <HAL_RCC_ClockConfig+0x148>
 8002068:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800206c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	647b      	str	r3, [r7, #68]	@ 0x44
 8002076:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800207a:	643b      	str	r3, [r7, #64]	@ 0x40
 800207c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002084:	4b46      	ldr	r3, [pc, #280]	@ (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800208c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800208e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002090:	fa92 f2a2 	rbit	r2, r2
 8002094:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002096:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002098:	fab2 f282 	clz	r2, r2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f042 0220 	orr.w	r2, r2, #32
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	f002 021f 	and.w	r2, r2, #31
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d13a      	bne.n	800212a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0b2      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
 80020b8:	2302      	movs	r3, #2
 80020ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80020c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d102      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x1a0>
 80020da:	4b31      	ldr	r3, [pc, #196]	@ (80021a0 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	e00d      	b.n	80020fc <HAL_RCC_ClockConfig+0x1bc>
 80020e0:	2302      	movs	r3, #2
 80020e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ec:	2302      	movs	r3, #2
 80020ee:	623b      	str	r3, [r7, #32]
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	4b29      	ldr	r3, [pc, #164]	@ (80021a0 <HAL_RCC_ClockConfig+0x260>)
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	2202      	movs	r2, #2
 80020fe:	61ba      	str	r2, [r7, #24]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	fa92 f2a2 	rbit	r2, r2
 8002106:	617a      	str	r2, [r7, #20]
  return result;
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	fab2 f282 	clz	r2, r2
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	f042 0220 	orr.w	r2, r2, #32
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	f002 021f 	and.w	r2, r2, #31
 800211a:	2101      	movs	r1, #1
 800211c:	fa01 f202 	lsl.w	r2, r1, r2
 8002120:	4013      	ands	r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e079      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212a:	4b1d      	ldr	r3, [pc, #116]	@ (80021a0 <HAL_RCC_ClockConfig+0x260>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f023 0203 	bic.w	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	491a      	ldr	r1, [pc, #104]	@ (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800213c:	f7fe fbf6 	bl	800092c <HAL_GetTick>
 8002140:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe fbf2 	bl	800092c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e061      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <HAL_RCC_ClockConfig+0x260>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 020c 	and.w	r2, r3, #12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	429a      	cmp	r2, r3
 800216a:	d1eb      	bne.n	8002144 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_RCC_ClockConfig+0x25c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d214      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b08      	ldr	r3, [pc, #32]	@ (800219c <HAL_RCC_ClockConfig+0x25c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 0207 	bic.w	r2, r3, #7
 8002182:	4906      	ldr	r1, [pc, #24]	@ (800219c <HAL_RCC_ClockConfig+0x25c>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b04      	ldr	r3, [pc, #16]	@ (800219c <HAL_RCC_ClockConfig+0x25c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e040      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
 800219c:	40022000 	.word	0x40022000
 80021a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <HAL_RCC_ClockConfig+0x2e8>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	491a      	ldr	r1, [pc, #104]	@ (8002228 <HAL_RCC_ClockConfig+0x2e8>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ce:	4b16      	ldr	r3, [pc, #88]	@ (8002228 <HAL_RCC_ClockConfig+0x2e8>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4912      	ldr	r1, [pc, #72]	@ (8002228 <HAL_RCC_ClockConfig+0x2e8>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021e2:	f000 f829 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 80021e6:	4601      	mov	r1, r0
 80021e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002228 <HAL_RCC_ClockConfig+0x2e8>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021f0:	22f0      	movs	r2, #240	@ 0xf0
 80021f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	fa92 f2a2 	rbit	r2, r2
 80021fa:	60fa      	str	r2, [r7, #12]
  return result;
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	fab2 f282 	clz	r2, r2
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	40d3      	lsrs	r3, r2
 8002206:	4a09      	ldr	r2, [pc, #36]	@ (800222c <HAL_RCC_ClockConfig+0x2ec>)
 8002208:	5cd3      	ldrb	r3, [r2, r3]
 800220a:	fa21 f303 	lsr.w	r3, r1, r3
 800220e:	4a08      	ldr	r2, [pc, #32]	@ (8002230 <HAL_RCC_ClockConfig+0x2f0>)
 8002210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002212:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <HAL_RCC_ClockConfig+0x2f4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe fb44 	bl	80008a4 <HAL_InitTick>
  
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3778      	adds	r7, #120	@ 0x78
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	08003cec 	.word	0x08003cec
 8002230:	20000000 	.word	0x20000000
 8002234:	20000004 	.word	0x20000004

08002238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002252:	4b1e      	ldr	r3, [pc, #120]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b04      	cmp	r3, #4
 8002260:	d002      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x30>
 8002262:	2b08      	cmp	r3, #8
 8002264:	d003      	beq.n	800226e <HAL_RCC_GetSysClockFreq+0x36>
 8002266:	e026      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800226a:	613b      	str	r3, [r7, #16]
      break;
 800226c:	e026      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	0c9b      	lsrs	r3, r3, #18
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	4a17      	ldr	r2, [pc, #92]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002278:	5cd3      	ldrb	r3, [r2, r3]
 800227a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800227c:	4b13      	ldr	r3, [pc, #76]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x94>)
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002294:	4a0e      	ldr	r2, [pc, #56]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	fbb2 f2f3 	udiv	r2, r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e004      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a0c      	ldr	r2, [pc, #48]	@ (80022dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	613b      	str	r3, [r7, #16]
      break;
 80022b4:	e002      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80022b8:	613b      	str	r3, [r7, #16]
      break;
 80022ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022bc:	693b      	ldr	r3, [r7, #16]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	007a1200 	.word	0x007a1200
 80022d4:	08003d04 	.word	0x08003d04
 80022d8:	08003d14 	.word	0x08003d14
 80022dc:	003d0900 	.word	0x003d0900

080022e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e4:	4b03      	ldr	r3, [pc, #12]	@ (80022f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000000 	.word	0x20000000

080022f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022fe:	f7ff ffef 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 8002302:	4601      	mov	r1, r0
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800230c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002310:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	fa92 f2a2 	rbit	r2, r2
 8002318:	603a      	str	r2, [r7, #0]
  return result;
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	fab2 f282 	clz	r2, r2
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	40d3      	lsrs	r3, r2
 8002324:	4a04      	ldr	r2, [pc, #16]	@ (8002338 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002326:	5cd3      	ldrb	r3, [r2, r3]
 8002328:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	08003cfc 	.word	0x08003cfc

0800233c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002342:	f7ff ffcd 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 8002346:	4601      	mov	r1, r0
 8002348:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002350:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002354:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	fa92 f2a2 	rbit	r2, r2
 800235c:	603a      	str	r2, [r7, #0]
  return result;
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	40d3      	lsrs	r3, r2
 8002368:	4a04      	ldr	r2, [pc, #16]	@ (800237c <HAL_RCC_GetPCLK2Freq+0x40>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	08003cfc 	.word	0x08003cfc

08002380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e049      	b.n	8002426 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe f908 	bl	80005bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3304      	adds	r3, #4
 80023bc:	4619      	mov	r1, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f000 fbf4 	bl	8002bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d001      	beq.n	8002448 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e038      	b.n	80024ba <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1c      	ldr	r2, [pc, #112]	@ (80024c8 <HAL_TIM_Base_Start+0x98>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00e      	beq.n	8002478 <HAL_TIM_Base_Start+0x48>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002462:	d009      	beq.n	8002478 <HAL_TIM_Base_Start+0x48>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a18      	ldr	r2, [pc, #96]	@ (80024cc <HAL_TIM_Base_Start+0x9c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_TIM_Base_Start+0x48>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a17      	ldr	r2, [pc, #92]	@ (80024d0 <HAL_TIM_Base_Start+0xa0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d115      	bne.n	80024a4 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <HAL_TIM_Base_Start+0xa4>)
 8002480:	4013      	ands	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b06      	cmp	r3, #6
 8002488:	d015      	beq.n	80024b6 <HAL_TIM_Base_Start+0x86>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002490:	d011      	beq.n	80024b6 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a2:	e008      	b.n	80024b6 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e000      	b.n	80024b8 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40012c00 	.word	0x40012c00
 80024cc:	40000400 	.word	0x40000400
 80024d0:	40014000 	.word	0x40014000
 80024d4:	00010007 	.word	0x00010007

080024d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e049      	b.n	800257e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7fe f880 	bl	8000604 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3304      	adds	r3, #4
 8002514:	4619      	mov	r1, r3
 8002516:	4610      	mov	r0, r2
 8002518:	f000 fb48 	bl	8002bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01b      	beq.n	80025ea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 0202 	mvn.w	r2, #2
 80025ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 facc 	bl	8002b6e <HAL_TIM_IC_CaptureCallback>
 80025d6:	e005      	b.n	80025e4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fabe 	bl	8002b5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 facf 	bl	8002b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01b      	beq.n	8002636 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f06f 0204 	mvn.w	r2, #4
 8002606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 faa6 	bl	8002b6e <HAL_TIM_IC_CaptureCallback>
 8002622:	e005      	b.n	8002630 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fa98 	bl	8002b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 faa9 	bl	8002b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01b      	beq.n	8002682 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f06f 0208 	mvn.w	r2, #8
 8002652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2204      	movs	r2, #4
 8002658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fa80 	bl	8002b6e <HAL_TIM_IC_CaptureCallback>
 800266e:	e005      	b.n	800267c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fa72 	bl	8002b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fa83 	bl	8002b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d020      	beq.n	80026ce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01b      	beq.n	80026ce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f06f 0210 	mvn.w	r2, #16
 800269e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2208      	movs	r2, #8
 80026a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fa5a 	bl	8002b6e <HAL_TIM_IC_CaptureCallback>
 80026ba:	e005      	b.n	80026c8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fa4c 	bl	8002b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fa5d 	bl	8002b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00c      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f06f 0201 	mvn.w	r2, #1
 80026ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fa2a 	bl	8002b46 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00c      	beq.n	8002716 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800270e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 feff 	bl	8003514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00c      	beq.n	800273a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fef7 	bl	8003528 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00c      	beq.n	800275e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fa1c 	bl	8002b96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00c      	beq.n	8002782 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f06f 0220 	mvn.w	r2, #32
 800277a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 febf 	bl	8003500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e0ff      	b.n	80029aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b14      	cmp	r3, #20
 80027b6:	f200 80f0 	bhi.w	800299a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80027ba:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	08002815 	.word	0x08002815
 80027c4:	0800299b 	.word	0x0800299b
 80027c8:	0800299b 	.word	0x0800299b
 80027cc:	0800299b 	.word	0x0800299b
 80027d0:	08002855 	.word	0x08002855
 80027d4:	0800299b 	.word	0x0800299b
 80027d8:	0800299b 	.word	0x0800299b
 80027dc:	0800299b 	.word	0x0800299b
 80027e0:	08002897 	.word	0x08002897
 80027e4:	0800299b 	.word	0x0800299b
 80027e8:	0800299b 	.word	0x0800299b
 80027ec:	0800299b 	.word	0x0800299b
 80027f0:	080028d7 	.word	0x080028d7
 80027f4:	0800299b 	.word	0x0800299b
 80027f8:	0800299b 	.word	0x0800299b
 80027fc:	0800299b 	.word	0x0800299b
 8002800:	08002919 	.word	0x08002919
 8002804:	0800299b 	.word	0x0800299b
 8002808:	0800299b 	.word	0x0800299b
 800280c:	0800299b 	.word	0x0800299b
 8002810:	08002959 	.word	0x08002959
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fa4a 	bl	8002cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0208 	orr.w	r2, r2, #8
 800282e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0204 	bic.w	r2, r2, #4
 800283e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6999      	ldr	r1, [r3, #24]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	619a      	str	r2, [r3, #24]
      break;
 8002852:	e0a5      	b.n	80029a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fab0 	bl	8002dc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800286e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800287e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6999      	ldr	r1, [r3, #24]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	021a      	lsls	r2, r3, #8
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	619a      	str	r2, [r3, #24]
      break;
 8002894:	e084      	b.n	80029a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fb0f 	bl	8002ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0208 	orr.w	r2, r2, #8
 80028b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0204 	bic.w	r2, r2, #4
 80028c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69d9      	ldr	r1, [r3, #28]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	61da      	str	r2, [r3, #28]
      break;
 80028d4:	e064      	b.n	80029a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 fb6d 	bl	8002fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69da      	ldr	r2, [r3, #28]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69d9      	ldr	r1, [r3, #28]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	021a      	lsls	r2, r3, #8
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	61da      	str	r2, [r3, #28]
      break;
 8002916:	e043      	b.n	80029a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fbb0 	bl	8003084 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0208 	orr.w	r2, r2, #8
 8002932:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0204 	bic.w	r2, r2, #4
 8002942:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002956:	e023      	b.n	80029a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fbee 	bl	8003140 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002972:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002982:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	021a      	lsls	r2, r3, #8
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002998:	e002      	b.n	80029a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	75fb      	strb	r3, [r7, #23]
      break;
 800299e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop

080029b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_TIM_ConfigClockSource+0x1c>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e0b6      	b.n	8002b3e <HAL_TIM_ConfigClockSource+0x18a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a0c:	d03e      	beq.n	8002a8c <HAL_TIM_ConfigClockSource+0xd8>
 8002a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a12:	f200 8087 	bhi.w	8002b24 <HAL_TIM_ConfigClockSource+0x170>
 8002a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a1a:	f000 8086 	beq.w	8002b2a <HAL_TIM_ConfigClockSource+0x176>
 8002a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a22:	d87f      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x170>
 8002a24:	2b70      	cmp	r3, #112	@ 0x70
 8002a26:	d01a      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0xaa>
 8002a28:	2b70      	cmp	r3, #112	@ 0x70
 8002a2a:	d87b      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x170>
 8002a2c:	2b60      	cmp	r3, #96	@ 0x60
 8002a2e:	d050      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x11e>
 8002a30:	2b60      	cmp	r3, #96	@ 0x60
 8002a32:	d877      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x170>
 8002a34:	2b50      	cmp	r3, #80	@ 0x50
 8002a36:	d03c      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0xfe>
 8002a38:	2b50      	cmp	r3, #80	@ 0x50
 8002a3a:	d873      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x170>
 8002a3c:	2b40      	cmp	r3, #64	@ 0x40
 8002a3e:	d058      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x13e>
 8002a40:	2b40      	cmp	r3, #64	@ 0x40
 8002a42:	d86f      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x170>
 8002a44:	2b30      	cmp	r3, #48	@ 0x30
 8002a46:	d064      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x15e>
 8002a48:	2b30      	cmp	r3, #48	@ 0x30
 8002a4a:	d86b      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x170>
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d060      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x15e>
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d867      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x170>
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d05c      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x15e>
 8002a58:	2b10      	cmp	r3, #16
 8002a5a:	d05a      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x15e>
 8002a5c:	e062      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a6e:	f000 fc41 	bl	80032f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	609a      	str	r2, [r3, #8]
      break;
 8002a8a:	e04f      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a9c:	f000 fc2a 	bl	80032f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002aae:	609a      	str	r2, [r3, #8]
      break;
 8002ab0:	e03c      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f000 fb9e 	bl	8003200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2150      	movs	r1, #80	@ 0x50
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fbf7 	bl	80032be <TIM_ITRx_SetConfig>
      break;
 8002ad0:	e02c      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f000 fbbd 	bl	800325e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2160      	movs	r1, #96	@ 0x60
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fbe7 	bl	80032be <TIM_ITRx_SetConfig>
      break;
 8002af0:	e01c      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afe:	461a      	mov	r2, r3
 8002b00:	f000 fb7e 	bl	8003200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2140      	movs	r1, #64	@ 0x40
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fbd7 	bl	80032be <TIM_ITRx_SetConfig>
      break;
 8002b10:	e00c      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	f000 fbce 	bl	80032be <TIM_ITRx_SetConfig>
      break;
 8002b22:	e003      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      break;
 8002b28:	e000      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a38      	ldr	r2, [pc, #224]	@ (8002ca0 <TIM_Base_SetConfig+0xf4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d007      	beq.n	8002bd4 <TIM_Base_SetConfig+0x28>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bca:	d003      	beq.n	8002bd4 <TIM_Base_SetConfig+0x28>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a35      	ldr	r2, [pc, #212]	@ (8002ca4 <TIM_Base_SetConfig+0xf8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d108      	bne.n	8002be6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca0 <TIM_Base_SetConfig+0xf4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d013      	beq.n	8002c16 <TIM_Base_SetConfig+0x6a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf4:	d00f      	beq.n	8002c16 <TIM_Base_SetConfig+0x6a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca4 <TIM_Base_SetConfig+0xf8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00b      	beq.n	8002c16 <TIM_Base_SetConfig+0x6a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a29      	ldr	r2, [pc, #164]	@ (8002ca8 <TIM_Base_SetConfig+0xfc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <TIM_Base_SetConfig+0x6a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a28      	ldr	r2, [pc, #160]	@ (8002cac <TIM_Base_SetConfig+0x100>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d003      	beq.n	8002c16 <TIM_Base_SetConfig+0x6a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a27      	ldr	r2, [pc, #156]	@ (8002cb0 <TIM_Base_SetConfig+0x104>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d108      	bne.n	8002c28 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <TIM_Base_SetConfig+0xf4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00b      	beq.n	8002c6c <TIM_Base_SetConfig+0xc0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a14      	ldr	r2, [pc, #80]	@ (8002ca8 <TIM_Base_SetConfig+0xfc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d007      	beq.n	8002c6c <TIM_Base_SetConfig+0xc0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a13      	ldr	r2, [pc, #76]	@ (8002cac <TIM_Base_SetConfig+0x100>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d003      	beq.n	8002c6c <TIM_Base_SetConfig+0xc0>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a12      	ldr	r2, [pc, #72]	@ (8002cb0 <TIM_Base_SetConfig+0x104>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d103      	bne.n	8002c74 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d105      	bne.n	8002c92 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f023 0201 	bic.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	611a      	str	r2, [r3, #16]
  }
}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40014000 	.word	0x40014000
 8002cac:	40014400 	.word	0x40014400
 8002cb0:	40014800 	.word	0x40014800

08002cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f023 0201 	bic.w	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f023 0302 	bic.w	r3, r3, #2
 8002d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a28      	ldr	r2, [pc, #160]	@ (8002db0 <TIM_OC1_SetConfig+0xfc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00b      	beq.n	8002d2c <TIM_OC1_SetConfig+0x78>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a27      	ldr	r2, [pc, #156]	@ (8002db4 <TIM_OC1_SetConfig+0x100>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d007      	beq.n	8002d2c <TIM_OC1_SetConfig+0x78>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a26      	ldr	r2, [pc, #152]	@ (8002db8 <TIM_OC1_SetConfig+0x104>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <TIM_OC1_SetConfig+0x78>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a25      	ldr	r2, [pc, #148]	@ (8002dbc <TIM_OC1_SetConfig+0x108>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d10c      	bne.n	8002d46 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f023 0308 	bic.w	r3, r3, #8
 8002d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a19      	ldr	r2, [pc, #100]	@ (8002db0 <TIM_OC1_SetConfig+0xfc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00b      	beq.n	8002d66 <TIM_OC1_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a18      	ldr	r2, [pc, #96]	@ (8002db4 <TIM_OC1_SetConfig+0x100>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d007      	beq.n	8002d66 <TIM_OC1_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a17      	ldr	r2, [pc, #92]	@ (8002db8 <TIM_OC1_SetConfig+0x104>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d003      	beq.n	8002d66 <TIM_OC1_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a16      	ldr	r2, [pc, #88]	@ (8002dbc <TIM_OC1_SetConfig+0x108>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d111      	bne.n	8002d8a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	621a      	str	r2, [r3, #32]
}
 8002da4:	bf00      	nop
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40014000 	.word	0x40014000
 8002db8:	40014400 	.word	0x40014400
 8002dbc:	40014800 	.word	0x40014800

08002dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f023 0210 	bic.w	r2, r3, #16
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f023 0320 	bic.w	r3, r3, #32
 8002e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a24      	ldr	r2, [pc, #144]	@ (8002eb0 <TIM_OC2_SetConfig+0xf0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d10d      	bne.n	8002e40 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb0 <TIM_OC2_SetConfig+0xf0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00b      	beq.n	8002e60 <TIM_OC2_SetConfig+0xa0>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8002eb4 <TIM_OC2_SetConfig+0xf4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d007      	beq.n	8002e60 <TIM_OC2_SetConfig+0xa0>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a19      	ldr	r2, [pc, #100]	@ (8002eb8 <TIM_OC2_SetConfig+0xf8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d003      	beq.n	8002e60 <TIM_OC2_SetConfig+0xa0>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a18      	ldr	r2, [pc, #96]	@ (8002ebc <TIM_OC2_SetConfig+0xfc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d113      	bne.n	8002e88 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e66:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e6e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40014000 	.word	0x40014000
 8002eb8:	40014400 	.word	0x40014400
 8002ebc:	40014800 	.word	0x40014800

08002ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0303 	bic.w	r3, r3, #3
 8002efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a23      	ldr	r2, [pc, #140]	@ (8002fac <TIM_OC3_SetConfig+0xec>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10d      	bne.n	8002f3e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f3c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a1a      	ldr	r2, [pc, #104]	@ (8002fac <TIM_OC3_SetConfig+0xec>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00b      	beq.n	8002f5e <TIM_OC3_SetConfig+0x9e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a19      	ldr	r2, [pc, #100]	@ (8002fb0 <TIM_OC3_SetConfig+0xf0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_OC3_SetConfig+0x9e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a18      	ldr	r2, [pc, #96]	@ (8002fb4 <TIM_OC3_SetConfig+0xf4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_OC3_SetConfig+0x9e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a17      	ldr	r2, [pc, #92]	@ (8002fb8 <TIM_OC3_SetConfig+0xf8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d113      	bne.n	8002f86 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	621a      	str	r2, [r3, #32]
}
 8002fa0:	bf00      	nop
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	40014000 	.word	0x40014000
 8002fb4:	40014400 	.word	0x40014400
 8002fb8:	40014800 	.word	0x40014800

08002fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800300a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	031b      	lsls	r3, r3, #12
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a16      	ldr	r2, [pc, #88]	@ (8003074 <TIM_OC4_SetConfig+0xb8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00b      	beq.n	8003038 <TIM_OC4_SetConfig+0x7c>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a15      	ldr	r2, [pc, #84]	@ (8003078 <TIM_OC4_SetConfig+0xbc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d007      	beq.n	8003038 <TIM_OC4_SetConfig+0x7c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a14      	ldr	r2, [pc, #80]	@ (800307c <TIM_OC4_SetConfig+0xc0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <TIM_OC4_SetConfig+0x7c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a13      	ldr	r2, [pc, #76]	@ (8003080 <TIM_OC4_SetConfig+0xc4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d109      	bne.n	800304c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800303e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	019b      	lsls	r3, r3, #6
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	621a      	str	r2, [r3, #32]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40012c00 	.word	0x40012c00
 8003078:	40014000 	.word	0x40014000
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800

08003084 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80030c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a15      	ldr	r2, [pc, #84]	@ (8003130 <TIM_OC5_SetConfig+0xac>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00b      	beq.n	80030f6 <TIM_OC5_SetConfig+0x72>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a14      	ldr	r2, [pc, #80]	@ (8003134 <TIM_OC5_SetConfig+0xb0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <TIM_OC5_SetConfig+0x72>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a13      	ldr	r2, [pc, #76]	@ (8003138 <TIM_OC5_SetConfig+0xb4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d003      	beq.n	80030f6 <TIM_OC5_SetConfig+0x72>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a12      	ldr	r2, [pc, #72]	@ (800313c <TIM_OC5_SetConfig+0xb8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d109      	bne.n	800310a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	621a      	str	r2, [r3, #32]
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40014000 	.word	0x40014000
 8003138:	40014400 	.word	0x40014400
 800313c:	40014800 	.word	0x40014800

08003140 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800316e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	051b      	lsls	r3, r3, #20
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a16      	ldr	r2, [pc, #88]	@ (80031f0 <TIM_OC6_SetConfig+0xb0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00b      	beq.n	80031b4 <TIM_OC6_SetConfig+0x74>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a15      	ldr	r2, [pc, #84]	@ (80031f4 <TIM_OC6_SetConfig+0xb4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d007      	beq.n	80031b4 <TIM_OC6_SetConfig+0x74>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a14      	ldr	r2, [pc, #80]	@ (80031f8 <TIM_OC6_SetConfig+0xb8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_OC6_SetConfig+0x74>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a13      	ldr	r2, [pc, #76]	@ (80031fc <TIM_OC6_SetConfig+0xbc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d109      	bne.n	80031c8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	029b      	lsls	r3, r3, #10
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	621a      	str	r2, [r3, #32]
}
 80031e2:	bf00      	nop
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40014000 	.word	0x40014000
 80031f8:	40014400 	.word	0x40014400
 80031fc:	40014800 	.word	0x40014800

08003200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f023 0201 	bic.w	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800322a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f023 030a 	bic.w	r3, r3, #10
 800323c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	621a      	str	r2, [r3, #32]
}
 8003252:	bf00      	nop
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800325e:	b480      	push	{r7}
 8003260:	b087      	sub	sp, #28
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f023 0210 	bic.w	r2, r3, #16
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003288:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	031b      	lsls	r3, r3, #12
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800329a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	621a      	str	r2, [r3, #32]
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	f043 0307 	orr.w	r3, r3, #7
 80032e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	609a      	str	r2, [r3, #8]
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800330e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	021a      	lsls	r2, r3, #8
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	431a      	orrs	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4313      	orrs	r3, r2
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	609a      	str	r2, [r3, #8]
}
 8003328:	bf00      	nop
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003348:	2302      	movs	r3, #2
 800334a:	e054      	b.n	80033f6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a24      	ldr	r2, [pc, #144]	@ (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d108      	bne.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800337c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800338e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a17      	ldr	r2, [pc, #92]	@ (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00e      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b4:	d009      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a13      	ldr	r2, [pc, #76]	@ (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d004      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a11      	ldr	r2, [pc, #68]	@ (800340c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d10c      	bne.n	80033e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40000400 	.word	0x40000400
 800340c:	40014000 	.word	0x40014000

08003410 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003428:	2302      	movs	r3, #2
 800342a:	e060      	b.n	80034ee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a14      	ldr	r2, [pc, #80]	@ (80034fc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d115      	bne.n	80034dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	051b      	lsls	r3, r3, #20
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40012c00 	.word	0x40012c00

08003500 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e040      	b.n	80035d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fd f8a6 	bl	80006b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2224      	movs	r2, #36	@ 0x24
 8003568:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f95e 	bl	8003844 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f825 	bl	80035d8 <UART_SetConfig>
 800358e:	4603      	mov	r3, r0
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e01b      	b.n	80035d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f9dd 	bl	8003988 <UART_CheckIdleState>
 80035ce:	4603      	mov	r3, r0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	4b8a      	ldr	r3, [pc, #552]	@ (800382c <UART_SetConfig+0x254>)
 8003604:	4013      	ands	r3, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	6979      	ldr	r1, [r7, #20]
 800360c:	430b      	orrs	r3, r1
 800360e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	430a      	orrs	r2, r1
 8003648:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a78      	ldr	r2, [pc, #480]	@ (8003830 <UART_SetConfig+0x258>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d120      	bne.n	8003696 <UART_SetConfig+0xbe>
 8003654:	4b77      	ldr	r3, [pc, #476]	@ (8003834 <UART_SetConfig+0x25c>)
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b03      	cmp	r3, #3
 800365e:	d817      	bhi.n	8003690 <UART_SetConfig+0xb8>
 8003660:	a201      	add	r2, pc, #4	@ (adr r2, 8003668 <UART_SetConfig+0x90>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	08003679 	.word	0x08003679
 800366c:	08003685 	.word	0x08003685
 8003670:	0800368b 	.word	0x0800368b
 8003674:	0800367f 	.word	0x0800367f
 8003678:	2300      	movs	r3, #0
 800367a:	77fb      	strb	r3, [r7, #31]
 800367c:	e01d      	b.n	80036ba <UART_SetConfig+0xe2>
 800367e:	2302      	movs	r3, #2
 8003680:	77fb      	strb	r3, [r7, #31]
 8003682:	e01a      	b.n	80036ba <UART_SetConfig+0xe2>
 8003684:	2304      	movs	r3, #4
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e017      	b.n	80036ba <UART_SetConfig+0xe2>
 800368a:	2308      	movs	r3, #8
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	e014      	b.n	80036ba <UART_SetConfig+0xe2>
 8003690:	2310      	movs	r3, #16
 8003692:	77fb      	strb	r3, [r7, #31]
 8003694:	e011      	b.n	80036ba <UART_SetConfig+0xe2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a67      	ldr	r2, [pc, #412]	@ (8003838 <UART_SetConfig+0x260>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d102      	bne.n	80036a6 <UART_SetConfig+0xce>
 80036a0:	2300      	movs	r3, #0
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e009      	b.n	80036ba <UART_SetConfig+0xe2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a64      	ldr	r2, [pc, #400]	@ (800383c <UART_SetConfig+0x264>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d102      	bne.n	80036b6 <UART_SetConfig+0xde>
 80036b0:	2300      	movs	r3, #0
 80036b2:	77fb      	strb	r3, [r7, #31]
 80036b4:	e001      	b.n	80036ba <UART_SetConfig+0xe2>
 80036b6:	2310      	movs	r3, #16
 80036b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036c2:	d15a      	bne.n	800377a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80036c4:	7ffb      	ldrb	r3, [r7, #31]
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d827      	bhi.n	800371a <UART_SetConfig+0x142>
 80036ca:	a201      	add	r2, pc, #4	@ (adr r2, 80036d0 <UART_SetConfig+0xf8>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	080036fd 	.word	0x080036fd
 80036d8:	08003705 	.word	0x08003705
 80036dc:	0800371b 	.word	0x0800371b
 80036e0:	0800370b 	.word	0x0800370b
 80036e4:	0800371b 	.word	0x0800371b
 80036e8:	0800371b 	.word	0x0800371b
 80036ec:	0800371b 	.word	0x0800371b
 80036f0:	08003713 	.word	0x08003713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f4:	f7fe fe00 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 80036f8:	61b8      	str	r0, [r7, #24]
        break;
 80036fa:	e013      	b.n	8003724 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036fc:	f7fe fe1e 	bl	800233c <HAL_RCC_GetPCLK2Freq>
 8003700:	61b8      	str	r0, [r7, #24]
        break;
 8003702:	e00f      	b.n	8003724 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003704:	4b4e      	ldr	r3, [pc, #312]	@ (8003840 <UART_SetConfig+0x268>)
 8003706:	61bb      	str	r3, [r7, #24]
        break;
 8003708:	e00c      	b.n	8003724 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370a:	f7fe fd95 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 800370e:	61b8      	str	r0, [r7, #24]
        break;
 8003710:	e008      	b.n	8003724 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003716:	61bb      	str	r3, [r7, #24]
        break;
 8003718:	e004      	b.n	8003724 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	77bb      	strb	r3, [r7, #30]
        break;
 8003722:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d074      	beq.n	8003814 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	005a      	lsls	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	085b      	lsrs	r3, r3, #1
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b0f      	cmp	r3, #15
 8003744:	d916      	bls.n	8003774 <UART_SetConfig+0x19c>
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374c:	d212      	bcs.n	8003774 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	b29b      	uxth	r3, r3
 8003752:	f023 030f 	bic.w	r3, r3, #15
 8003756:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	b29b      	uxth	r3, r3
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	b29a      	uxth	r2, r3
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	4313      	orrs	r3, r2
 8003768:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	89fa      	ldrh	r2, [r7, #14]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	e04f      	b.n	8003814 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	77bb      	strb	r3, [r7, #30]
 8003778:	e04c      	b.n	8003814 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800377a:	7ffb      	ldrb	r3, [r7, #31]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d828      	bhi.n	80037d2 <UART_SetConfig+0x1fa>
 8003780:	a201      	add	r2, pc, #4	@ (adr r2, 8003788 <UART_SetConfig+0x1b0>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	080037ad 	.word	0x080037ad
 800378c:	080037b5 	.word	0x080037b5
 8003790:	080037bd 	.word	0x080037bd
 8003794:	080037d3 	.word	0x080037d3
 8003798:	080037c3 	.word	0x080037c3
 800379c:	080037d3 	.word	0x080037d3
 80037a0:	080037d3 	.word	0x080037d3
 80037a4:	080037d3 	.word	0x080037d3
 80037a8:	080037cb 	.word	0x080037cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ac:	f7fe fda4 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 80037b0:	61b8      	str	r0, [r7, #24]
        break;
 80037b2:	e013      	b.n	80037dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037b4:	f7fe fdc2 	bl	800233c <HAL_RCC_GetPCLK2Freq>
 80037b8:	61b8      	str	r0, [r7, #24]
        break;
 80037ba:	e00f      	b.n	80037dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037bc:	4b20      	ldr	r3, [pc, #128]	@ (8003840 <UART_SetConfig+0x268>)
 80037be:	61bb      	str	r3, [r7, #24]
        break;
 80037c0:	e00c      	b.n	80037dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037c2:	f7fe fd39 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 80037c6:	61b8      	str	r0, [r7, #24]
        break;
 80037c8:	e008      	b.n	80037dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037ce:	61bb      	str	r3, [r7, #24]
        break;
 80037d0:	e004      	b.n	80037dc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	77bb      	strb	r3, [r7, #30]
        break;
 80037da:	bf00      	nop
    }

    if (pclk != 0U)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d018      	beq.n	8003814 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	085a      	lsrs	r2, r3, #1
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	441a      	add	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b0f      	cmp	r3, #15
 80037fa:	d909      	bls.n	8003810 <UART_SetConfig+0x238>
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003802:	d205      	bcs.n	8003810 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	b29a      	uxth	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	e001      	b.n	8003814 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003820:	7fbb      	ldrb	r3, [r7, #30]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	efff69f3 	.word	0xefff69f3
 8003830:	40013800 	.word	0x40013800
 8003834:	40021000 	.word	0x40021000
 8003838:	40004400 	.word	0x40004400
 800383c:	40004800 	.word	0x40004800
 8003840:	007a1200 	.word	0x007a1200

08003844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01a      	beq.n	800395a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003942:	d10a      	bne.n	800395a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b098      	sub	sp, #96	@ 0x60
 800398c:	af02      	add	r7, sp, #8
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003998:	f7fc ffc8 	bl	800092c <HAL_GetTick>
 800399c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d12e      	bne.n	8003a0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b4:	2200      	movs	r2, #0
 80039b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f88c 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d021      	beq.n	8003a0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039da:	653b      	str	r3, [r7, #80]	@ 0x50
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e6      	bne.n	80039c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e062      	b.n	8003ad0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d149      	bne.n	8003aac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a20:	2200      	movs	r2, #0
 8003a22:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f856 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d03c      	beq.n	8003aac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e6      	bne.n	8003a32 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3308      	adds	r3, #8
 8003a82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a84:	61fa      	str	r2, [r7, #28]
 8003a86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	69b9      	ldr	r1, [r7, #24]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	617b      	str	r3, [r7, #20]
   return(result);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e5      	bne.n	8003a64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e011      	b.n	8003ad0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3758      	adds	r7, #88	@ 0x58
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae8:	e04f      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d04b      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fc ff1b 	bl	800092c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e04e      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d037      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b80      	cmp	r3, #128	@ 0x80
 8003b1e:	d034      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b40      	cmp	r3, #64	@ 0x40
 8003b24:	d031      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d110      	bne.n	8003b56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2208      	movs	r2, #8
 8003b3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f838 	bl	8003bb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2208      	movs	r2, #8
 8003b46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e029      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b64:	d111      	bne.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f81e 	bl	8003bb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e00f      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d0a0      	beq.n	8003aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b095      	sub	sp, #84	@ 0x54
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e6      	bne.n	8003bba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3308      	adds	r3, #8
 8003c0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d118      	bne.n	8003c5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f023 0310 	bic.w	r3, r3, #16
 8003c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6979      	ldr	r1, [r7, #20]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	613b      	str	r3, [r7, #16]
   return(result);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e6      	bne.n	8003c28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c6e:	bf00      	nop
 8003c70:	3754      	adds	r7, #84	@ 0x54
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <memset>:
 8003c7a:	4402      	add	r2, r0
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d100      	bne.n	8003c84 <memset+0xa>
 8003c82:	4770      	bx	lr
 8003c84:	f803 1b01 	strb.w	r1, [r3], #1
 8003c88:	e7f9      	b.n	8003c7e <memset+0x4>
	...

08003c8c <__libc_init_array>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8003cc4 <__libc_init_array+0x38>)
 8003c90:	4c0d      	ldr	r4, [pc, #52]	@ (8003cc8 <__libc_init_array+0x3c>)
 8003c92:	1b64      	subs	r4, r4, r5
 8003c94:	10a4      	asrs	r4, r4, #2
 8003c96:	2600      	movs	r6, #0
 8003c98:	42a6      	cmp	r6, r4
 8003c9a:	d109      	bne.n	8003cb0 <__libc_init_array+0x24>
 8003c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8003ccc <__libc_init_array+0x40>)
 8003c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8003cd0 <__libc_init_array+0x44>)
 8003ca0:	f000 f818 	bl	8003cd4 <_init>
 8003ca4:	1b64      	subs	r4, r4, r5
 8003ca6:	10a4      	asrs	r4, r4, #2
 8003ca8:	2600      	movs	r6, #0
 8003caa:	42a6      	cmp	r6, r4
 8003cac:	d105      	bne.n	8003cba <__libc_init_array+0x2e>
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
 8003cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb4:	4798      	blx	r3
 8003cb6:	3601      	adds	r6, #1
 8003cb8:	e7ee      	b.n	8003c98 <__libc_init_array+0xc>
 8003cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cbe:	4798      	blx	r3
 8003cc0:	3601      	adds	r6, #1
 8003cc2:	e7f2      	b.n	8003caa <__libc_init_array+0x1e>
 8003cc4:	08003d24 	.word	0x08003d24
 8003cc8:	08003d24 	.word	0x08003d24
 8003ccc:	08003d24 	.word	0x08003d24
 8003cd0:	08003d28 	.word	0x08003d28

08003cd4 <_init>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	bf00      	nop
 8003cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cda:	bc08      	pop	{r3}
 8003cdc:	469e      	mov	lr, r3
 8003cde:	4770      	bx	lr

08003ce0 <_fini>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	bf00      	nop
 8003ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce6:	bc08      	pop	{r3}
 8003ce8:	469e      	mov	lr, r3
 8003cea:	4770      	bx	lr
